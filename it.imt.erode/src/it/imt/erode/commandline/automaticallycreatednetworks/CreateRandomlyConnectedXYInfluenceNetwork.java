package it.imt.erode.commandline.automaticallycreatednetworks;


import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;

import cern.jet.random.engine.MersenneTwister;

import cern.jet.random.engine.RandomEngine;
import it.imt.erode.commandline.EULER;
import it.imt.erode.crn.interfaces.ICRN;
import it.imt.erode.importing.GUICRNImporter;
import it.imt.erode.importing.ODEorNET;
import it.imt.erode.importing.automaticallygeneratedmodels.RandomBNG;
import it.imt.erode.importing.automaticallygeneratedmodels.RandomlyConnectedXYInfluenceNetwork;
import it.imt.erode.partition.interfaces.IPartition;

public class CreateRandomlyConnectedXYInfluenceNetwork {

	public static void main(String[] args) {
		/*RandomlyConnectedXYInfluenceNetwork creator = new RandomlyConnectedXYInfluenceNetwork();
		ICRN crn=creator.createXYInfluenceNetwork(5, "_1", null, null);
		if(crn!=null){
			write(crn);
		}
		
		crn=creator.createXYInfluenceNetwork(5, "_2", null, null);
		if(crn!=null){
			write(crn);
		}*/
		
		//CreateRandomlyConnectedXYInfluenceNetwork c = new CreateRandomlyConnectedXYInfluenceNetwork();
		//c.createAllCombinations(2);
		
		
		CreateRandomlyConnectedXYInfluenceNetwork c = new CreateRandomlyConnectedXYInfluenceNetwork();
		c.createOneCombination(4);
	}
	
	public void createOneCombination(int N){
		int[] xpromotes=new int[N];
		int[] yinhibites=new int[N];
		for(int i=0;i<N;i++){
			xpromotes[i]=i;
			yinhibites[i]=i;
		}
		
		List<int[]> allPromotions = permute(xpromotes);
		List<int[]> allInhibitions = permute(yinhibites);
		
		Date d = new Date();
		RandomEngine randomGenerator = new MersenneTwister(d);
		System.out.println("I have sizes prom "+allPromotions.size()+", and inhi "+allInhibitions.size());
		/*for(int i=0;i<100;i++){
			int prom = RandomBNG.nextInt(randomGenerator,allPromotions.size()-1);
			int inhi= RandomBNG.nextInt(randomGenerator,allInhibitions.size()-1);
			System.out.println("I have chosen prom "+prom+", and inhi "+inhi);
		}*/
		int prom = RandomBNG.nextInt(randomGenerator,allPromotions.size()-1);
		int inhi= RandomBNG.nextInt(randomGenerator,allInhibitions.size()-1);
		System.out.println("I have chosen prom "+prom+", and inhi "+inhi);
		xpromotes= allPromotions.get(prom);
		yinhibites= allInhibitions.get(inhi);
		
		RandomlyConnectedXYInfluenceNetwork creator = new RandomlyConnectedXYInfluenceNetwork();
		ICRN crn=creator.createXYInfluenceNetwork(N, "", null, null,xpromotes,yinhibites);
		if(crn!=null){
			write(crn);
		}
		
	}
	
	public void createAllCombinations(int N){
		int[] xpromotes=new int[N];
		int[] yinhibites=new int[N];
		for(int i=0;i<N;i++){
			xpromotes[i]=i;
			yinhibites[i]=i;
		}
		
		List<int[]> allPromotions = permute(xpromotes);
		List<int[]> allInhibitions = permute(yinhibites);
		
		RandomlyConnectedXYInfluenceNetwork creator = new RandomlyConnectedXYInfluenceNetwork();
		int c=0;
		for(int[] xprom : allPromotions){
			for(int[] yinh : allInhibitions){
				ICRN crn=creator.createXYInfluenceNetwork(N, "_"+c, null, null,xprom,yinh);
				if(crn!=null){
					write(crn);
				}
				c++;
			}
		}
	}

	private static void write(ICRN crn) {
		IPartition partition = CreateHTreeCircuit.defaultPartition(crn);
		Collection<String> comments=new ArrayList<>(1);
		comments.add("Automatically generated by ERODE");
		GUICRNImporter.printToERODEFIle(crn, partition, crn.getName()+".ode", false, false, comments, false, null, null, null, ODEorNET.RN, false,false,EULER.NO);
	}
	
	
	public List<int[]> permute(int[] nums) {
	    List<List<Integer>> results = new ArrayList<List<Integer>>();
	    if (nums == null || nums.length == 0) {
	        return null;
	    }
	    List<Integer> result = new ArrayList<>();
	    dfs(nums, results, result);
	    
	    List<int[]> resultsArray = new ArrayList<int[]>(results.size());
	    for(List<Integer> perm : results){
	    	int[] array = new int[perm.size()];
	    	resultsArray.add(array);
	    	
	    	int i=0;
	    	for(int p:perm){
	    		array[i]=p;
	    		i++;
	    	}
	    }
	    
	    return resultsArray;
	}

	public void dfs(int[] nums, List<List<Integer>> results, List<Integer> result) {
	    if (nums.length == result.size()) {
	        List<Integer> temp = new ArrayList<>(result);
	        results.add(temp);
	    }        
	    for (int i=0; i<nums.length; i++) {
	        if (!result.contains(nums[i])) {
	            result.add(nums[i]);
	            dfs(nums, results, result);
	            result.remove(result.size() - 1);
	        }
	    }
	}
	
}
