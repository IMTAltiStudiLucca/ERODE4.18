package it.imt.erode.commandline.automaticallycreatednetworks;

import java.util.ArrayList;
import java.util.Collection;

import it.imt.erode.commandline.EULER;
import it.imt.erode.crn.interfaces.ICRN;
import it.imt.erode.importing.GUICRNImporter;
import it.imt.erode.importing.ODEorNET;
import it.imt.erode.importing.automaticallygeneratedmodels.SIR_VaxOnGraph;
import it.imt.erode.partition.interfaces.IPartition;

public class CreateSIRVaxOnGraph {

	static final double a = 2;
	static final double b = 1;
	static final double g = 0.01;
	static final double eta = 0.02;
	static final double delta = 0.005;
	static final double kmigr = 3;
	static final int Nmin=   3;//5000;
	static final int Nmax=  3;//50000;
	static final int Nstep=  3;//5000;
	
	
	public static void main(String[] args) {
		SIR_VaxOnGraph sirCreator = new SIR_VaxOnGraph();
		
		for(int n=Nmin;n<=Nmax;n+=Nstep) {
			ICRN crn = sirCreator.createSIR_VaxOnGraph(n, a, b, g, eta,kmigr,delta, "", null, null);
			if(crn!=null){
				//String seCommand="reduceSE(reducedFile=\"SIR_VAXonGrah"+n+"_SE.ode\",prePartition=USER)";
				//String useCommand="reduceUSE(delta=0.1, prePartition=USER,reducedFile=\"SIR_VAXonGrah"+n+"_USE.ode\")";
				//ArrayList<String> commands =new ArrayList<>(2);
				//commands.add(seCommand);
				//commands.add(useCommand);
				write(crn,n/*,commands*/);
			}
		}
		System.out.println("Done");
	}
	
	private static void write(ICRN crn,int n/*, ArrayList<String> commands*/) {
		IPartition partition = CreateHTreeCircuit.defaultPartition(crn);
		Collection<String> comments=new ArrayList<>(1);
		comments.add("Automatically generated by ERODE");
		comments.add("SIR_Vax on a star graph: with "+n+" nodes");
		GUICRNImporter.printToERODEFIle(crn, partition, crn.getName()+".ode", false, false, comments, false, null, null, null, ODEorNET.RN, false,false,EULER.NO);
	}

}
