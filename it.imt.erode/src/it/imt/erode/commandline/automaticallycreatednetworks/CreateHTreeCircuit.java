package it.imt.erode.commandline.automaticallycreatednetworks;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;

import it.imt.erode.crn.interfaces.ICRN;
import it.imt.erode.crn.interfaces.ISpecies;
import it.imt.erode.importing.GUICRNImporter;
import it.imt.erode.importing.ODEorNET;
import it.imt.erode.importing.automaticallygeneratedmodels.HTreeCircuit;
import it.imt.erode.partition.implementations.Block;
import it.imt.erode.partition.implementations.Partition;
import it.imt.erode.partition.interfaces.IBlock;
import it.imt.erode.partition.interfaces.IPartition;

public class CreateHTreeCircuit {

	public static void main(String[] args) throws IOException {
		
		int vs=2;
		double[] delta=new double[9];
		delta[2]=1.4e-3;
		delta[3]=1.1e-3;
		delta[4]=5.21e-4;
		delta[5]=4.46e-4;
		delta[6]=4.46e-4;
		delta[7]=4.46e-4;
		delta[8]=4.46e-4;
		
		//for(int N=2;N<=8;N++){
		for(int copy=1;copy<=10;copy++){
			//for(int N=8;N<=8;N++){
			for(int N=2;N<=8;N++){
				//for(int N=2;N<=4;N++){
				System.out.println("\n\n\nN="+N);
				//createAndWriteCircuit(N,vs,delta[N],false,-1);
				createAndWriteCircuit(N,vs,delta[N],true,0.01,String.valueOf(copy));
				System.out.println("\n\n\n");
			}
		}
		
		System.out.println("Done");

	}

	private static void createAndWriteCircuit(int N, int vs,double delta,boolean perturbParameters, double percentageOfPerturbation, String suffix) throws IOException {
		ICRN crn = HTreeCircuit.createHTreeCiruit(N,vs,delta, null, null,perturbParameters,percentageOfPerturbation,suffix);
		
		if(crn!=null){
			IPartition partition = defaultPartition(crn);
			Collection<String> comments=new ArrayList<>(1);
			comments.add("Automatically generated by ERODE");
			GUICRNImporter.printToERODEFIle(crn, partition, crn.getName()+".ode", false, false, comments, false, null, null, null, ODEorNET.ODE, false,false);
		}
	}

	public static IPartition defaultPartition(ICRN crn) {
		IBlock block=new Block();
		IPartition partition = new Partition(block, crn.getSpecies().size());
		for (ISpecies species : crn.getSpecies()) {
			block.addSpecies(species);
		}
		return partition;
	}

}
