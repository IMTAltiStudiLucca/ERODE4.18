package it.imt.erode.tests;

import java.math.BigDecimal;

import it.imt.erode.expression.evaluator.Expression;

public class TestEvalBigDecimal {

	public static void main(String[] args) {
		 BigDecimal result = null;

		/* Expression expression = new Expression("1+1/3");
		 result = expression.eval();
		 System.out.println(result);
		 expression.setPrecision(2);
		 result = expression.eval();
		 System.out.println(result);
		 expression = new Expression("1+a");
		 expression.setVariable("a", BigDecimal.TEN);
		 result = expression.eval();
		 System.out.println(result);
		 expression.setVariable("a", BigDecimal.ONE);
		 result = expression.eval();
		 System.out.println(result);
		 Expression expression2 = new Expression("1+a");
		 expression2.setVariables(expression.getVariables());
		 result = expression2.eval();
		 System.out.println(result);*/
		 
		 //String expr = "0 + 1*(2.106204 + (0.007216595/ 2) * 1000.0 + (0.000005338472/ 3) * (1000.0^2) + (-0.000000007377636/ 4) * (1000.0^3) + (0.000000000002075611/ 5) * (1000.0^4) + 978.6011 / 1000.0) + -1*(1.69516234 + (0.0522910229/ 2) * 1000.0 + (-0.0000408701205/ 3) * (1000.0^2) + (0.0000000165061912/ 4) * (1000.0^3) + (-0.00000000000271670294/ 5) * (1000.0^4) + -43813.3748 / 1000.0) + 1*(0E-8 + (0.00000000/ 2) * 1000.0 + (0.00000000/ 3) * (1000.0^2) + (0.00000000/ 4) * (1000.0^3) + (0.00000000/ 5) * (1000.0^4) + 0.00000000 / 1000.0)";
		 //String expr = "0 + 1*(2.500000 + (0E-8/ 2) * 1000.0 + (0E-8/ 3) * (1000.0^2) + (0E-8/ 4) * (1000.0^3) + (0E-8/ 5) * (1000.0^4) + 25471.63 / 1000.0)";
		 //String expr = "0 + 1*(2.500000 + (0E-8/ 2) * 1000.0 + (0E-8/ 3) * (1000.0^2) + (0E-8/ 4) * (1000.0^3) + (0E-8/ 5) * (1000.0^4) + 25471.63 / 1000.0) + 1*(2.430443 + (0.01112410/ 2) * 1000.0 + (-0.00001680220/ 3) * (1000.0^2) + (1.621829E-8/ 4) * (1000.0^3) + (-5.864953E-12/ 5) * (1000.0^4) + 16423.78 / 1000.0) + -1*(0.7787415 + (0.01747668/ 2) * 1000.0 + (-0.00002783409/ 3) * (1000.0^2) + (3.049708E-8/ 4) * (1000.0^3) + (-1.223931E-11/ 5) * (1000.0^4) + -9825.229 / 1000.0)";
		 //Expression expression = new Expression(expr);
		 //result = expression.eval();
		 //System.out.println(result);
		 
		 
		 String expr = "(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+"+
                "(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+"+
                "(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+"+
                "(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+"+
                "(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+"+
                "(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+"+
                "(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+"+
                "(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+"+
                "(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+"+
                "(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+"+
                "(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+"+
                "(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+"+
                "(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+"+
                "(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+"+
                "(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+"+
                "(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+"+
                "(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0+(1.0)/166.0";
		 
		 Expression expression = new Expression(expr);
		 result = expression.eval();
		 System.out.println(result);
	}

}
