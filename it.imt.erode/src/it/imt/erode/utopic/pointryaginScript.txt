
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%      Pontryagin Maximum Principle based algorithm
%
%      General explanation:
%      This algorithm finds the maximum (or the minimum) of 
%       \sum \alpha_i x_i(T), i.e.,
%      a linear combination of coordinates of the vector x at time T, 
%      where x is given by \dot{x}(t)=f(x,\theta),
%      with \theta\in\[theta_min,theta_max].
% 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%      Inputs: x0,T,theta_min,theta_max,vcoeff,maxim,KMAX,epsilon
%	
%      Input parameters description:
%       - x0: initial point
%       - T: finite horizon
%       - theta_min, theta_max: extreme values of the interval where
%	                        the unknown parameters belongs, i.e., 
%				[theta_min,theta_max].
%		- vcoeff: weights of the coordinates that we want to maximize/minimize
%       - maxim: integer that specifies if we want to maximize or minimize 
%	         If maxim==1, we aim to maximize, otherwise, minimize it
%       - KMAX: maximum number of iterations 
%       - epsilon: the numerical threshold 0 < epsilon < 1 
%		- maxStep: the max time step used for ODE integration
%	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%	Outputs: res, theta_opt.
%	
%	Output parameters description:
%	- res: the vector x at time t=T, i.e., res=(res_1(T),...,res_i(T),...),
%	         where res_i(T) maximizes/minimizes x_i(T).
%              
%	- theta_opt: the control that maximizes/minimizes x_i(T)
%
%	Note for the output:
%	  If the algorithm does not converge (in KMAX loops), we give a suboptimal
%	  solution and, instead of giving the output that maximizes/minimizes x_i(T),
%     the output is the one that maximizes/minimizes x_i(T) among all the obtained  
% 	  curves in the loops.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


function [res,theta_opt]=algo_pointryagin(x0,T,theta_min,theta_max,vcoeff,maxim,KMAX,epsilon,maxStep)


%  COMPUTATION PARAMETERS
%h  = 0.01; 
h  = maxStep;
myT=ceil(T/h+1); 



%  Initial control 1: ALWAYS THETA_MAX 
disp('initial traj 1')
theta=zeros(myT,size(theta_min,2));
for t=1:myT-1
    theta(t,:)=theta_max;
end;
theta(myT,:)=theta_max;
options = odeset('RelTol',1e-12,'Stats','off','MaxStep',maxStep);
[t_,x]=ode15s(@(t,y) ode(t,y,theta,0:h:T), 0:h:T ,x0,options); 
[x1,k1,theta1] = fun_pontryagin(theta,vcoeff,x0,h,T,theta_min,theta_max,KMAX,t_,x,maxim,epsilon,maxStep);


%   Initial control 2: ALWAYS THETA_MIN 
disp('initial traj 2')
for t=1:myT-1
    theta(t,:)=theta_min;
end;
theta(myT,:)=theta_min;
options = odeset('RelTol',1e-12,'Stats','off','MaxStep',maxStep);
[t_,X2]=ode15s(@(t,y) ode(t,y,theta,0:h:T), 0:h:T ,x0,options); 
[x2,k2,theta2] = fun_pontryagin(theta,vcoeff,x0,h,T,theta_min,theta_max,KMAX,t_,X2,maxim,epsilon,maxStep);


%   Initial control 3: THETA_MAX & THETA_MIN 
disp('initial traj 3')
for t=1:myT-1
    if t<=myT/2
        theta(t,:)=theta_min;
    else
        theta(t,:)=theta_max;
    end
end;
theta(myT,:)=theta_max;
options = odeset('RelTol',1e-12,'Stats','off','MaxStep',maxStep);
[t_,X2]=ode15s(@(t,y) ode(t,y,theta,0:h:T), 0:h:T ,x0,options); 
[x3,k3,theta3] = fun_pontryagin(theta,vcoeff,x0,h,T,theta_min,theta_max,KMAX,t_,X2,maxim,epsilon,maxStep);


% Initial control 4: THETA_MAX & THETA_MIN 
disp('initial traj 4')
for t=1:myT-1
    if t<=myT/2
        theta(t,:)=theta_max;
    else
        theta(t,:)=theta_min;
    end
end;
theta(myT,:)=theta_min;
options = odeset('RelTol',1e-12,'Stats','off','MaxStep',maxStep);
[t_,X2]=ode15s(@(t,y) ode(t,y,theta,0:h:T), 0:h:T ,x0,options); 
[x4,k4,theta4] = fun_pontryagin(theta,vcoeff,x0,h,T,theta_min,theta_max,KMAX,t_,X2,maxim,epsilon,maxStep);


% We get the optimum trajectory among those that converged
if k1+k2+k3+k4<4*KMAX
  if maxim==1
   mymax=-1;
   if k1<KMAX
      mymax=sum(vcoeff.*x1(myT,:));
      x_opt=x1; theta_opt=theta1;
   end
   if sum(vcoeff.*x2(myT,:))>mymax && k2<KMAX
        %mymax=vcoeff.*x2(myT,:);
        mymax=sum(vcoeff.*x2(myT,:));
        x_opt=x2; theta_opt=theta2;
   end
   if sum(vcoeff.*x3(myT,:))>mymax && k3<KMAX
        mymax=sum(vcoeff.*x3(myT,:));
        x_opt=x3; theta_opt=theta3;
   end
   if sum(vcoeff.*x4(myT,:))>mymax && k4<KMAX
        x_opt=x4; theta_opt=theta4;
   end
  else
    mymin=1000;
    if k1<KMAX
      mymin=sum(vcoeff.*x1(myT,:));
      x_opt=x1; theta_opt=theta1;
    end
    if sum(vcoeff.*x2(myT,:)) <mymin && k2<KMAX
        mymin=sum(vcoeff.*x2(myT,:));
        x_opt=x2; theta_opt=theta2;
    end
    if sum(vcoeff.*x3(myT,:))<mymin && k3<KMAX
        mymin=sum(vcoeff.*x3(myT,:));
        x_opt=x3; theta_opt=theta3;
    end
    if sum(vcoeff.*x4(myT,:))<mymin && k4<KMAX
        x_opt=x4; theta_opt=theta4;
    end
  end

% Non-convergence case: get the optimum trajectory among those that have 
%    been computed
else
    disp('NO CONVERGENCE!')
    if maxim==1
      mymax=sum(vcoeff.*x1(myT,:));
      x_opt=x1; 
      theta_opt=theta1;
      if sum(vcoeff.*x2(myT,:))>mymax
        mymax=sum(vcoeff.*x2(myT,:));
        x_opt=x2; theta_opt=theta2;
      end
      if sum(vcoeff.*x3(myT,:))>mymax
        mymax=sum(vcoeff.*x2(myT,:));
        x_opt=x3; theta_opt=theta3;
      end
      if sum(vcoeff.*x4(myT,:))>mymax
        x_opt=x4; theta_opt=theta4;
      end
    else
      mymin=sum(vcoeff.*x1(myT,:));
      x_opt=x1; theta_opt=theta1;
      if sum(vcoeff.*x2(myT,:))<mymin
        mymin=sum(vcoeff.*x2(myT,:));
        x_opt=x2; theta_opt=theta2;
      end
      if sum(vcoeff.*x3(myT,:))<mymin
        mymin=sum(vcoeff.*x3(myT,:));
        x_opt=x3; theta_opt=theta3;
      end
      if sum(vcoeff.*x4(myT,:))<mymin
        x_opt=x4; theta_opt=theta4;
      end    
    end
end    
res=x_opt(myT,:);
end


function [x,k,theta]=fun_pontryagin(theta,vcoeff,x0,h,T,theta_min,theta_max,KMAX,t_,x,maxim,epsilon,maxStep)

% Main function of the Algorithm.
% For a given input theta, it returns the trajectory that is the value that
%     maximizes/minimizes \sum \alpha_i x_i(T), for alpha_i and T fixed.
% Until convergence or it does KMAX loops, in each loop, it computes :
%   (1) backward in time the optimal conditions for the costate vector
%   (2) forward in time the optimal control theta

p=zeros(size(t_,1),size(x0,1));
d = 0;
d2 = 0; 
k=0;
mydif_=1;
p20=p;
x_prev=x;
while max(mydif_)>epsilon  && k<KMAX

    % Backward in time
    p2=zeros(size(t_,1),size(x0,1));
    for j=1:size(x0,1)
      if maxim==1 
         p2(size(t_,1),j)=vcoeff(j);
      else
          p2(size(t_,1),j)=-vcoeff(j);
      end
    end
    for t=size(t_,1):-1:2
        p2(t-1,:)=p2(t,:)+(t_(t)-t_(t-1))*opt_costate(x(t,:),theta(t,:),p2(t,:))';
    end   
    p2=d*p20+(1-d)*p2;
    d=k/(1+k);
    
    % Forward in time
    theta=zeros(size(t_,1),size(theta_min,2));
    for t=1:size(t_,1)-1
       theta(t,:)=mytheta_max(x(t,:),p2(t,:),theta_min,theta_max);
    end
    theta(size(t_,1),:)=mytheta_max(x(size(t_,1),:),p2(size(t_,1),:),theta_min,theta_max);
    options = odeset('RelTol',1e-12,'Stats','off','MaxStep',maxStep);
    [t_,x]=ode15s(@(t,y) ode(t,y,theta,t_), 0:h:T ,x0,options); 
    
    % Comparison with previus trajectory
    mydif_=abs(sum(x*vcoeff')-sum(x_prev*vcoeff'));
    x=d2*x_prev+(1-d2)*x;
    d2=k/(1+k);
    x_prev=x;

    % Update "best" trajectory among those computed in the loops
    if k>1 
        if maxim==1 && sum(x(size(t_,1))*vcoeff')>sum(x_save(size(t_,1))*vcoeff')
              x_save=x;
        end
        if maxim~=1 && sum(x*vcoeff')<sum(x_save*vcoeff')
              x_save=x;
              theta_save=theta;
        end
    else
        x_save=x;
        theta_save=theta;
    end
    k=k+1;
end

% In case of non-convergence, it returs a suboptimal solution that is 
%   the "best" trajectory among those that have been computed in the loops.
 if k==KMAX
    disp('Did not converge.') 
    x=x_save;
    theta=theta_save;
 end

end

function theta=mytheta_max(x,p,theta_min,theta_max)

% Function to compute the optimal theta at time t, that is, the value of  
%    theta that maximizes the inner product of f(x,theta) and  p
% Given the linearity of the equations, the maximum is obtaines for 
%   theta_min or theta_max.

theta=zeros(size(theta_min,2),1);
for i=1:size(theta_min,2)
    v=theta_min;
    f=ode2(x,v);
    val1=(dot(f, p));
    v(i)=theta_max(i);
    f=ode2(x,v);
    val2=(dot(f, p));
    if val1>val2
        theta(i)=theta_min(i);
    else
        theta(i)=theta_max(i);
    end
end

end

function p_=opt_costate(y,theta,p)

% Function to compute the vector formed by the jacobian times the
%   vector p.

dfdx=myjacobian(y,theta);
p_=zeros(size(p,2),1);
for j=1:size(p,2)
    p_(j)=dot(dfdx(j,:),p);
end

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% End of Pontryagin Maximum Principle based algorithm
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
