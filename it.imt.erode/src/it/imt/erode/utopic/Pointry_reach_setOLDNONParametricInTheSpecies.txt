function Pointry_reach_set(x0,T,theta_min,theta_max,sl_1,sl_2)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Reachability analysis of ODEs with non-linear dynamics using Pointryagin's
%   Maximum Principle.
% 
% For sake of visualization, we focus on the second and the third coordinates.
%
% Inputs:
%  - x0: initial value 
%  - T : time horizon
%  - theta_min: lower-bounds of the uncertain parameters. It is a vector of
%     size equal to the number of uncertain parameters.
%  - theta_max: upper-bounds of the uncertain parameters. It is a vector of
%     size equal to the number of uncertain parameters.
%  - sl_1: slope1 to obtain the reachable set
%  - sl_2: slope2 to obtain the reachable set
%
% Output:
% The obtained reachable set is a polygone formed by a rectangle and two
% lines of slopes sl_1 and sl_2  ( where sl_1 < sl_2 )
%       
%      X---------X
%      |          \ sl_1
%      X           \
%       \           X 
%   sl_2 \           \
%         \           \ sl_2
%          X           \
%           \           X  
%       sl_1 \          |
%             \         |
%              X--------X 
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

tic

% Calculate the maximum and minimum of x(2) at time T=.1 by means of Pointryagin
%  algorithm 
xmax1=algo_pointryagin([2 3],[1 0],T,x0,theta_min,theta_max,1);
xmin1=algo_pointryagin([2 3],[1 0],T,x0,theta_min,theta_max,0);

% Calculate the maximum and minimum of x(3) at time T=.1 by means of Pointryagin
%  algorithm 
xmax2=algo_pointryagin([2 3],[0 1],T,x0,theta_min,theta_max,1);
xmin2=algo_pointryagin([2 3],[0 1],T,x0,theta_min,theta_max,0);

% maximum and minimum of a1*x(2)+a2*x(3) at time T=.1, where a2/a1=sl_1
xmax4_=algo_pointryagin([2 3],[1/(sl_1+1) sl_1/(sl_1+1)],T,x0,theta_min,theta_max,1);
xmin4_=algo_pointryagin([2 3],[1/(sl_1+1) sl_1/(sl_1+1)],T,x0,theta_min,theta_max,0);

% maximum and minimum of a1*x(2)+a2*x(3) at time T=.1, where a2/a1=sl_2
xmax6_=algo_pointryagin([2 3],[1/(sl_2+1) sl_2/(sl_2+1)],T,x0,theta_min,theta_max,1);
xmin6_=algo_pointryagin([2 3],[1/(sl_2+1) sl_2/(sl_2+1)],T,x0,theta_min,theta_max,0);
tComp = toc;
disp(['computation time of reachable set: ',num2str(tComp)]);
hold on

% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% computing lines of slopes sl_1 and sl_2
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if xmax1(3)>xmax2(3)
    a1max=[xmax1(3) xmax1(2)];
    a1min=[xmax2(3) xmax2(2)];
else
    a1max=[xmax2(3) xmax2(2)];
    a1min=[xmax1(3) xmax1(2)];
end
if xmin1(3)>xmin2(3)
    a1max_=[xmin1(3) xmin1(2)];
    a1min_=[xmin2(3) xmin2(2)];
else
    a1max_=[xmin2(3) xmin2(2)];
    a1min_=[xmin1(3) xmin1(2)];
end

v=[a1min_(1) a1max_(2)]; v2=[a1max(1) a1min(2)];
pos=[v(1) v(2) v2(1)-v(1) v2(2)-v(2)];
myline1=-sl_1*(linspace(pos(1),pos(3)+pos(1),100))+(xmax4_(2)+sl_1*xmax4_(3));
myline1_=-sl_1*(linspace(pos(1),pos(3)+pos(1),100))+(xmin4_(2)+sl_1*xmin4_(3));
myline2=-sl_2*(linspace(pos(1),pos(3)+pos(1),100))+(xmax6_(2)+sl_2*xmax6_(3));
myline2_=-sl_2*(linspace(pos(1),pos(3)+pos(1),100))+(xmin6_(2)+sl_2*xmin6_(3));

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Creating the vertex of the polygone
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
x=linspace(pos(1),pos(3)+pos(1),100);
[a ival]=min(abs(myline1-v2(2)));
aux0=[x(ival) v2(2)];
[a ival]=min(abs(myline1-myline2));
aux1=[x(ival) myline1(ival)];
[a ival]=min(abs(v(2)-myline2));
aux2=[v2(1) myline2(ival)];
[a ival]=min(abs(v(2)-myline1_));
aux3=[x(ival) v(2)];
[a ival]=min(abs(myline1_-myline2_));
aux4=[x(ival) myline1_(ival)];
[a ival]=min(abs(v2(2)-myline2_));
aux5=[v(1) myline2_(ival)];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Draw the polygone with the following eight vertices
%
% (v(1),v2(2))  aux0
%      X---------X
%      |          \
% aux5 X           \
%       \           X  aux1
%        \           \
%         \           \
%    aux4  X           \
%           \           X  aux2
%            \          |
%             \         |
%              X--------X (v2(1),v(2))
%            aux3
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

x=[v(1) aux0(1) aux1(1) aux2(1) v2(1) aux3(1) aux4(1) aux5(1)];
y=[v2(2) aux0(2) aux1(2) aux2(2) v(2) aux3(2) aux4(2) aux5(2)];
h=fill(x,y,[.4 .4 .4]);
set(h,'facealpha',.5);
h=fill(x,y,[.4 .4 .4]);
set(h,'facealpha',.5);

% d1=0.1*(xmin1(3)-xmax1(3));
% d2=0.1*(xmax1(2)-xmin1(2));
% axis([xmax1(3)-d1 xmin1(3)+d1 xmin1(2)-d2 xmax1(2)+d2]);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Draw the points where the maxima and the minima are obtained
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

plot(xmax1(3),xmax1(2),'o','MarkerSize',10,'MarkerEdgeColor','k')
plot(xmin1(3),xmin1(2),'o','MarkerSize',10,'MarkerEdgeColor','k')

plot(xmax4_(3),xmax4_(2),'o','MarkerSize',10,'MarkerEdgeColor','k')
plot(xmin4_(3),xmin4_(2),'o','MarkerSize',10,'MarkerEdgeColor','k')

plot(xmax6_(3),xmax6_(2),'o','MarkerSize',10,'MarkerEdgeColor','k')
plot(xmin6_(3),xmin6_(2),'o','MarkerSize',10,'MarkerEdgeColor','k')

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% if you want to see the lines that generate the poligone uncoment the 
% following code
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% rectangle('Position',pos,'LineWidth',2)
% plot(linspace(pos(1),pos(3)+pos(1),100),myline1,'Color',[0,0,0],'LineWidth',2)
% plot(linspace(pos(1),pos(3)+pos(1),100),myline1_,'Color',[0,0,0],'LineWidth',2)
% plot(linspace(pos(1),pos(3)+pos(1),100),myline2,'Color',[0,0,0],'LineWidth',2)
% plot(linspace(pos(1),pos(3)+pos(1),100),myline2_,'Color',[0,0,0],'LineWidth',2)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% end of to be uncomented code
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

end