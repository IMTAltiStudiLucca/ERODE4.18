package it.imt.erode.importing;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.eclipse.ui.console.MessageConsoleStream;


import it.imt.erode.commandline.CRNReducerCommandLine;
import it.imt.erode.crn.interfaces.ICRN;
import it.imt.erode.crn.interfaces.ICRNReaction;
import it.imt.erode.crn.interfaces.ISpecies;

public class StoichiometricMatrixExporter {

	
	public static void printCRNToStoichiometricMatrixCSVFile(ICRN crn,String name, boolean verbose,MessageConsoleStream out,BufferedWriter bwOut) {
		String fileName = name;
//		String fileName2=AbstractImporter.overwriteExtensionIfEnabled(fileName,"",true);
//		String modelId=fileName2.replace("."+File.separator, "").replace(File.separator, "").replace("-", "_").replace("~", "_");//"_" is ok
		
		fileName=AbstractImporter.overwriteExtensionIfEnabled(fileName,".csv");
		if(verbose){
			CRNReducerCommandLine.print(out,bwOut,"Writing model in file "+fileName);
		}

		AbstractImporter.createParentDirectories(fileName);
		BufferedWriter br;
		try {
			br = new BufferedWriter(new FileWriter(fileName));
		} catch (IOException e) {
			CRNReducerCommandLine.println(out,bwOut,"Problems in printCRNToStoichiometricMatrixCSVFile, exception raised while creating the filewriter for file: "+fileName);
			CRNReducerCommandLine.printStackTrace(out,bwOut,e);
			return;
		}

		try {
			
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
			
			String n = crn.getName();
			if(n==null || n.length()==0) {
				n=crn.getName();
				int p = n.lastIndexOf(File.separator);
				n=n.substring(p+1);
			}
			
			br.write("# Stoichimetric Matrix automatically generated by ERODE on "+dateFormat.format(new Date(System.currentTimeMillis()))+" from: " + 
					n + 
					"\n");
//			if(preambleCommentLines!=null && preambleCommentLines.size()>0){
//				for (String comment : preambleCommentLines) {
//					br.write("<!--"+comment+"-->\n");
//				}
//				br.write("\n");
//			}
			int i=4;
			br.write("#Line to species:\n#");
			for(ISpecies s : crn.getSpecies()) {
				br.write(i+"-"+s.getName()+" ");
				i++;
			}
			br.write("\n");
			
//			ArrayList<HashMap<ISpecies, Integer>> netreactions = new ArrayList<HashMap<ISpecies, Integer>>(crn.getReactions().size());
//			for(ICRNReaction r : crn.getReactions()) {
//				netreactions.add(r.computeProductsMinusReagentsHashMap());
//			}
			
			for(ISpecies s : crn.getSpecies()) {
//				for(HashMap<ISpecies, Integer> netr : netreactions) {
//					int v=netr.get(s);
//					br.write(v+",");
//				}
				for(ICRNReaction r : crn.getReactions()) {
					int mult = r.getReagents().getMultiplicityOfSpecies(s);
					mult = r.getProducts().getMultiplicityOfSpecies(s) - mult;
					br.write(mult+",");
				}
				br.write("\n");
			}

		} catch (IOException e) {
			CRNReducerCommandLine.println(out,bwOut,"Problems in printCRNToStoichiometricMatrixCSVFile, exception raised while writing in the file: "+fileName);
			CRNReducerCommandLine.printStackTrace(out,bwOut,e);
			return;
		}
		finally{
			if(verbose){
				CRNReducerCommandLine.println(out,bwOut,"Writing model in file "+fileName+" completed");
			}
			try {
				br.close();
			} catch (IOException e) {
				CRNReducerCommandLine.println(out,bwOut,"Problems in printCRNToStoichiometricMatrixCSVFile, exception raised while closing the bufferedwriter of the file: "+fileName);
				CRNReducerCommandLine.printStackTrace(out,bwOut,e);
			}
		}

	}
	
}
