function [avg_err,max_err] = computeErrors(M, samplings, compactumBound,driftName)

    n = size(M,2);
    avg_err = 0;
    max_err = 0;
    for i = 1 : samplings
        x = compactumBound .* rand(n,1);
        
        aux1 = feval(driftName,0,x);
        aux2 = feval(driftName,0,(M'*M*x));
        cur_err = norm(M*(aux1 - aux2));
        
        avg_err = avg_err + cur_err;
        max_err = max(max_err, cur_err);
    end
    
    avg_err = avg_err / samplings;
end



function [Jclean,k]=removeZeroJ(J,N)
    %I remove all zero matrices from J
    zerosparse = zeros(N,N);
    Jclean = cell(size(J,1),1);
    i2=1;
    for i=1:1:size(J,1)
        %J{i}
        if J{i} == zerosparse
            %do nothing
        else
            Jclean{i2} = J{i};
            i2=i2+1;
        end      
    end
    k=i2-1;
end

% function [et,perc_et,normM_xt]=solve_and_compute_error(M,driftName,tspan,x0,rows_in_M0)
%     Solve the orginal drift
% 	[~,Y]=ode45(driftName,tspan,x0);
%     Compute M*x(t)
%     points=size(Y,1);
% 	xt=Y(points,:)';
% 	M_xt= M*xt;    
%     
%     Solve the 'lumped' drift
%     d(x_hat) = M*f(M'*x_hat) with x_hat(0) := M*x(0).
%     x_hat0=M*x0;
%     [~,Y_hat]=ode45(@(t,y) lumpedDrift(t,y,M,M',driftName),tspan,x_hat0);
%     Compute x_hat(t)
% 	points=size(Y_hat,1);
% 	x_hat_t=Y_hat(points,:)';
%     
%     Compute absolute e(t)
% 	diff = x_hat_t - M_xt;
% 	et=norm(diff);  
%     diff_rows_of_interest = diff(1:rows_in_M0,:);
%     et=norm(diff_rows_of_interest);
% 	
%     Compute percentual e(t)
%     normM_xt=norm(M_xt);
% 	perc_diff=et/normM_xt;
% 	perc_et=norm(perc_diff);
%     Compute percentual e(t) on the rows of interest
%     normM_xt=norm(M_xt(1:rows_in_M0,:));
% 	perc_diff=et/normM_xt;
% 	perc_et=norm(perc_diff)*100;
%     
%     fprintf('\nThe error obtained on the lumped drift restricting to the rows of M0:\n')
%     fprintf('e(t) = %d\n       %d%% of ||M*x(t)||_2 = %d\n',et,perc_et,normM_xt)
%         
% end

function [et,perc_et,normM_xt]=solve_and_compute_error(M,driftName,tspan,x0,M0,epsilon,max_allowed_slope)
    %Solve the orginal drift
	[T,Y]=ode45(driftName,tspan,x0);
    %Compute M0*x(t)
    points=size(Y,1);
	xt=Y(points,:)';
	%M_xt= M*xt;
    M0_xt=M0*xt;
    
    %Solve the 'lumped' drift using M
    %d(x_hat) = M*f(M'*x_hat) with x_hat(0) := M*x(0).
    x_hat0=M*x0;
    [T_hat,Y_hat]=ode45(@(t,y) lumpedDrift(t,y,M,M',driftName),tspan,x_hat0);
    
    %%%
    %Now, we transform the solution on M on solutions on M0
    % Compute solution vector (needed to extract views from reduced solution)
    S=M'\M0'; % How to map solutions on M in solutions on M0
    views = Y_hat*S;% Map the solutions on M in solutions on M0
    %Compute x_hat(t) (the solutions on M0 for the latest timepoint)
	points=size(Y_hat,1);
	%x_hat_t=Y_hat(points,:)';
    x_hat_t=views(points,:)';
    
    rows_in_M0=size(M0,1);
    
    %Compute absolute e(t)
	diff = x_hat_t - M0_xt;
	%et=norm(diff);  
    diff_rows_of_interest = diff(1:rows_in_M0,:);
    et=norm(diff_rows_of_interest);
	
    %Compute percentual e(t)
    %normM_xt=norm(M_xt);
	%perc_diff=et/normM_xt;
	%perc_et=norm(perc_diff);
    %Compute percentual e(t) on the rows of interest
    normM_xt=norm(M0_xt(1:rows_in_M0,:));
	perc_diff=et/normM_xt;
	perc_et=norm(perc_diff)*100;
    
    fprintf('\nThe error obtained on the lumped drift restricting to the rows of M0:\n')
    fprintf('e(t) = %d\n       %d%% of ||M*x(t)||_2 = %d\n',et,perc_et,normM_xt)
    fprintf('diff:')
    disp(diff_rows_of_interest)
    
    plot(T,M0*Y',T_hat,views)
    legend("Original",num2str(epsilon)+"-cLump")
    saveas(gcf,strcat("figures",filesep,driftName,"_nRows"+size(M,1),"_eps"+epsilon,"_max_alw_slope_"+num2str(max_allowed_slope),".jpg"))
    
        
end



%[t,y] = ode45(@(t,y) odefun(t,y,a,b,c), tspan, ic);
%d(xhat) = M*f(M'*xhat) with xhat(0) := M*x(0).
function dy =  lumpedDrift(t,y,M,Mt,driftName) 
  %y is actually x_hat
  Mt_yhat=Mt*y;
  f_Mt_yhat=feval(driftName,0,Mt_yhat);
  dy=M*f_Mt_yhat;
end

% WARNING: M will be *not* orthogonal, the reduced model is therefore: 
% OLD       = M*f(M'*xhat           ) with xhat(0) := M*x(0).        
% dot_hat_x = M*f(M'*inv(M*M')*hat_x), where f is the original drift
function dy =  lumpedDrift_if_adding_back_M0(t,y,M,Mt,driftName) 
  %y is actually x_hat
  %Mt_yhat=Mt*y;
  Mt_yhat=Mt*inv(M*Mt)*y;
  %Mt_yhat=Mt*((M*Mt)\y);
  f_Mt_yhat=feval(driftName,0,Mt_yhat);
  dy=M*f_Mt_yhat;
end

% Input:
% M0: Matrix whose rows are the desired views
% computed_M: Matrix computed by epsclump whose rows should span the views 
% (but that does not necessarily have them as explicit rows)
% Output:
% M: Matrix whose row space coincides with the row space of computed_M and whose
% first rows coincide with M0
function M=addBackRequiredRows(M0,computed_M)
    % Cross-check (can be commented)
    %X = computed_M'\M0';
    %if(sum(sum(isinf(X))) > 0)
    %    disp('Rows of M0 are not contained in the row span of computed_M')
    %end

    % Computation of M
    M = [M0; computed_M];
    removed = 0;
    for i = 1 : size(computed_M,1)
        aux = M(i+size(M0,1),:);
        M(i+size(M0,1),:) = zeros(1,size(M0,2));
        if(rank(M) < size(computed_M,1))
            M(i+size(M0,1),:) = aux;
        else
            removed = removed + 1;
        end

        if(removed == size(M0,1)) 
            break;
        end
    end
    ind = find(all(M==0,2));
    M(ind,:) = [];
end