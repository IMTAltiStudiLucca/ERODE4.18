package it.imt.erode.importing;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Map.Entry;

import org.eclipse.ui.console.MessageConsoleStream;


import it.imt.erode.commandline.CRNReducerCommandLine;
import it.imt.erode.crn.interfaces.ICRN;
import it.imt.erode.crn.interfaces.ICRNReaction;
import it.imt.erode.crn.interfaces.ISpecies;

public class StochKitExporter {

	
	public static void printCRNToStochKitXMLFile(ICRN crn,String name, Collection<String> preambleCommentLines, boolean verbose,MessageConsoleStream out,BufferedWriter bwOut) {
		String fileName = name;
//		String fileName2=AbstractImporter.overwriteExtensionIfEnabled(fileName,"",true);
//		String modelId=fileName2.replace("."+File.separator, "").replace(File.separator, "").replace("-", "_").replace("~", "_");//"_" is ok
		if(!crn.isMassAction()){
			CRNReducerCommandLine.printWarning(out,bwOut,"The model is not supported because it contains reactions with arbitrary kinetics. I terminate.");
			return;
		}
		if(crn.isSymbolic()){
			CRNReducerCommandLine.printWarning(out,bwOut,"The model is not supported because it contains symbolic parameters (i.e. parameters with no acutal value assigned). I terminate.");
			return;
		}
		
		fileName=AbstractImporter.overwriteExtensionIfEnabled(fileName,".xml");
		if(verbose){
			CRNReducerCommandLine.print(out,bwOut,"Writing model in file "+fileName);
		}

		AbstractImporter.createParentDirectories(fileName);
		BufferedWriter br;
		try {
			br = new BufferedWriter(new FileWriter(fileName));
		} catch (IOException e) {
			CRNReducerCommandLine.println(out,bwOut,"Problems in printCRNToStochKitXMLFile, exception raised while creating the filewriter for file: "+fileName);
			CRNReducerCommandLine.printStackTrace(out,bwOut,e);
			return;
		}

		try {
			
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
			
			br.write("<!-- Stochkit 2.0 text input format " + 
					"\n" + 
					"     Automatically generated by ERODE on "+dateFormat.format(new Date(System.currentTimeMillis()))+" from:\n     " + 
					fileName + 
					"\n-->\n");
			if(preambleCommentLines!=null && preambleCommentLines.size()>0){
				for (String comment : preambleCommentLines) {
					br.write("<!--"+comment+"-->\n");
				}
				br.write("\n");
			}
			/*String modelId=crn.getName();
			if(modelId==null||modelId.equals("")){
				SimpleDateFormat sdfDate = new SimpleDateFormat("dd-MM-yyyy-HH:mm:ss.SSS");
				modelId=sdfDate.format(new Date());
			}*/
			br.write("  <Model>\n");
			br.write("    <Description>"+crn.getName()+"</Description>\n");
			br.write("    <NumberOfReactions>"+crn.getReactions().size()+"</NumberOfReactions>\n");
			br.write("    <NumberOfSpecies>"+crn.getSpecies().size()+"</NumberOfSpecies>\n");
			
			br.write("    <ReactionsList>\n");
			int r=0;
			for(ICRNReaction reaction : crn.getReactions()) {
				br.write("       <Reaction>\n");
				if(reaction.getID()!=null && reaction.getID().length()>0) {
					br.write("         <Id>"+reaction.getID()+"</Id>\n");
				}
				else {
					br.write("         <Id>R"+r+"</Id>\n");
				}
				br.write("         <Description>"+reaction.getReagents().toMultiSetWithStoichiometriesOrigNames(true)+" -> "+reaction.getProducts().toMultiSetWithStoichiometriesOrigNames(true)+"</Description>\n");
				br.write("         <Type>mass-action</Type>\n");
				br.write("         <Rate>"+reaction.getRate().doubleValue()+"</Rate>\n");
				
				br.write("         <Reactants>\n");
				HashMap<ISpecies, Integer> reagentsHM = reaction.getReagents().toHashMap();
				for(Entry<ISpecies, Integer> entry : reagentsHM.entrySet()) {
					br.write("           <SpeciesReference id=\""+entry.getKey().getName()+"\" stoichiometry=\""+entry.getValue()+"\"/>\n");
				}
				br.write("         </Reactants>\n");
				br.write("         <Products>\n");
				HashMap<ISpecies, Integer> productsHM = reaction.getProducts().toHashMap();
				for(Entry<ISpecies, Integer> entry : productsHM.entrySet()) {
					br.write("           <SpeciesReference id=\""+entry.getKey().getName()+"\" stoichiometry=\""+entry.getValue()+"\"/>\n");
				}
				br.write("         </Products>\n");				
				br.write("       </Reaction>\n");
				r++;
			}
			br.write("    </ReactionsList>\n");
			
			br.write("    <SpeciesList>\n");
			for(ISpecies s : crn.getSpecies()) {
				br.write("        <Species>\n");
				br.write("          <Id>"+s.getName()+"</Id>\n");
				if(s.getOriginalName()!=null && s.getOriginalName().length()>0) {
					br.write("          <Description>"+s.getOriginalName()+"</Description>\n");
				}
				br.write("          <InitialPopulation>"+((long)(s.getInitialConcentration().doubleValue()+0.5))+"</InitialPopulation>\n");
				br.write("        </Species>\n");
			}
			br.write("    </SpeciesList>\n");
			br.write("  </Model>\n");

		} catch (IOException e) {
			CRNReducerCommandLine.println(out,bwOut,"Problems in printCRNToStochKitXMLFile, exception raised while writing in the file: "+fileName);
			CRNReducerCommandLine.printStackTrace(out,bwOut,e);
			return;
		}
		finally{
			if(verbose){
				CRNReducerCommandLine.println(out,bwOut,"Writing model in file "+fileName+" completed");
			}
			try {
				br.close();
			} catch (IOException e) {
				CRNReducerCommandLine.println(out,bwOut,"Problems in printCRNToStochKitXMLFile, exception raised while closing the bufferedwriter of the file: "+fileName);
				CRNReducerCommandLine.printStackTrace(out,bwOut,e);
			}
		}

	}
	
}
