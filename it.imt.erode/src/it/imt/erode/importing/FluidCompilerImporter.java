package it.imt.erode.importing;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.eclipse.ui.console.MessageConsoleStream;

import it.imt.erode.commandline.CRNReducerCommandLine;
import it.imt.erode.commandline.IMessageDialogShower;
import it.imt.erode.crn.interfaces.ICRN;
import it.imt.erode.crn.interfaces.ICRNReaction;
import it.imt.erode.crn.interfaces.ISpecies;
import it.imt.erode.partition.interfaces.IBlock;
import it.imt.erode.partition.interfaces.IPartition;

/**
 * 
 * @author Andrea Vandin
 * This class is used to export reaction networks in the input format of the Maude tool FluidCompiler (file extension: .maude).
 *  
 */
public class FluidCompilerImporter extends AbstractImporter{

	public static final String FluidCompilerModelsFolder = "."+File.separator+"FluidCompilerModels"+File.separator;

	public FluidCompilerImporter(String fileName,MessageConsoleStream out,BufferedWriter bwOut,IMessageDialogShower msgDialogShower) {
		super(fileName,out,bwOut,msgDialogShower);
	}

	public static void printCRNToFluidCompilerFile(ICRN crn, IPartition partition, boolean verbose,MessageConsoleStream out,BufferedWriter bwOut) throws UnsupportedFormatException{
		printCRNToFluidCompilerFile(crn, crn.getName(),partition,verbose,out,bwOut);
	}

	private static void write(BufferedWriter bw, String line) throws IOException{
		bw.write(line);
		bw.write("\n");
	}

	public static void printCRNToFluidCompilerFile(ICRN crn, String name, IPartition partition, boolean verbose,MessageConsoleStream out,BufferedWriter bwOut) throws UnsupportedFormatException{
		String fileName = AbstractImporter.overwriteExtensionIfEnabled(name,".maude");

		if(verbose){
			CRNReducerCommandLine.println(out,bwOut,"Writing CRN in file "+fileName);
		}

		createParentDirectories(fileName);
		BufferedWriter br;
		try {
			br = new BufferedWriter(new FileWriter(fileName));
		} catch (IOException e) {
			CRNReducerCommandLine.println(out,bwOut,"Problems in printCRNToFlyFastFile, exception raised while creating the filewriter for file: "+fileName);
			CRNReducerCommandLine.printStackTrace(out,bwOut,e);
			return;
		}

		try {

			DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
			Date date = new Date();
			//CRNReducerCommandLine.println(out,bwOut,dateFormat.format(date)); //2014/08/06 15:59:48
			br.write("--- Date: "+dateFormat.format(date)+"\n");
			if(name!=null && !name.equals("")){
				br.write("---  Automatically generated by "+CRNReducerCommandLine.TOOLNAME+" starting from the model "+name+"\n");
			}
			else{
				br.write("---  Generated by "+CRNReducerCommandLine.TOOLNAME+"\n");
			}
			br.write("--- \n");
			br.write("---  "+crn.getSpecies().size()+" species, "+crn.getReactions().size()+" reactions\n");
			br.write("--- \n");
			br.write("--- \n");

			String moduleName="ROOTMODULE";
			String modelName="Mcrn";
			String partitionName="Pd";
			
			int lastSeparator=fileName.lastIndexOf(File.separator);
			String relativeFileName=fileName;
			if(lastSeparator!=-1){
				relativeFileName=fileName.substring(lastSeparator+1);
			}
			
			br.write("\n");
			write(br,"--- Arguments to be used in Eclipse");
			write(br,"--- -mc /Users/andrea/Dropbox/altroAccount/maude/maude.intelDarwin");
			write(br,"--- -il CRN -ss ./Models/FPA/"+relativeFileName+" -rm "+moduleName+" -mn "+modelName+" -pn "+partitionName+" -pt OFL -z3 "+relativeFileName+"-OFL");
			write(br,"--- -il CRN -ss ./Models/FPA/"+relativeFileName+" -rm "+moduleName+" -mn "+modelName+" -pn "+partitionName+" -pt EFL -z3 "+relativeFileName+"-EFL");			
			
			br.write("\n");
			br.write("fmod ROOTMODULE is\n");
			br.write("\n");

			br.write("  --- Import the FluidCompiler\n");
			br.write("  pr CRN-COMPILER .\n");
			br.write("  --- Import the Z3 Exporter\n");
			br.write("  pr CRN-COMPILER-Z3-EXPORTER .\n");
			br.write("  ---pr FLOATCA-SIMPLIFICATION .\n");
			br.write("\n");

			br.write("  ***--- Spefication of the CRN --- ***\n");

			//The rates
			br.write("\n");
			br.write("  --- The rates\n");
			for(String param : crn.getParameters()){
				String paramName = param.substring(0, param.indexOf(" ")).trim();
				String paramExpr = param.substring(param.indexOf(" "),param.length()).trim();
				br.write("  op ");
				br.write(paramName);
				write(br," : -> FloatCA .");
				write(br,"  eq toString("+paramName+") = \""+paramName+"\" .");
				write(br,"  eq "+paramName+" = "+crn.getMath().evaluate(paramExpr)+" .");
				//br.write("const "+param.replace(" ", " = ")+";\n");
			}

			write(br,"  var M : CRN .\n  ceq rates(M) = empty\n   if M := Mcrn .");
			
			br.write("\n");
			br.write("  --- The species\n");
			for (ISpecies species : crn.getSpecies()) {
				br.write("  op ");
				String supportedName = species.getNameAlphanumeric();
				br.write(supportedName);
				write(br," : -> Species .");
				write(br,"  eq toString("+supportedName+") = \""+supportedName+"\" .");
			}

			br.write("\n");
			write(br,"  --- The actual definition of the CRN");
			write(br,"  op Mcrn : -> CRN .");
			br.write("  eq Mcrn\n   = ");
			int s=0;
			int size = crn.getReactions().size();
			for (ICRNReaction reaction : crn.getReactions()) {
				s++;
				br.write(toFluidCompilerReaction(reaction,crn)); //A -[6.0]-> D , A -[2.0]-> C + C + C ,
				if(s<size){
					br.write(" ,\n");
					br.write("     ");
				}
				else{
					br.write("  .\n");	
				}
			}




			br.write("\n");
			//the partition
			br.write("  --- A partition of the species\n");
			br.write("  op Pd : -> Partition .\n");
			br.write("  eq Pd\n   =");
			//eq Pd = {A,B} , {C,E} , {D} .  			  
			IBlock currentBlock = partition.getFirstBlock();
			while(currentBlock!=null){
				br.write(" { ");
				s=0;
				size=currentBlock.getSpecies().size();
				for (ISpecies species : currentBlock.getSpecies()) {
					s++;
					br.write(species.getNameAlphanumeric());
					if(s<size){
						br.write(" , ");
					}
					else{
						br.write(" }");
					}
				}
				currentBlock=currentBlock.getNext();
				if(currentBlock!=null){
					br.write(" ,\n    ");
				}
				else{
					br.write(" .\n");
				}
			}
			
			

			br.write("\nendfm\n");

		} catch (IOException e) {
			CRNReducerCommandLine.println(out,bwOut,"Problems in printCRNToFluidCompilerFile, exception raised while writing in the file: "+fileName);
			CRNReducerCommandLine.printStackTrace(out,bwOut,e);
			return;
		}
		finally{
			if(verbose){
				CRNReducerCommandLine.println(out,bwOut,"Writing reactions in file "+fileName+" completed");
			}
			try {
				br.close();
			} catch (IOException e) {
				CRNReducerCommandLine.println(out,bwOut,"Problems in printCRNToFluidCompilerFile, exception raised while closing the bufferedwriter of the file: "+fileName);
				CRNReducerCommandLine.printStackTrace(out,bwOut,e);
			}
		}

	}

	private static String toFluidCompilerReaction(ICRNReaction reaction, ICRN crn) {
		//A -[6.0]-> D , A -[2.0]-> C + C + C ,
		StringBuilder sb = new StringBuilder();

		sb.append(reaction.getReagents().toMultiSetWithAlphaNumericNames());

		if(! reaction.hasArbitraryKinetics()){
			sb.append(" -[ ");
			//sb.append(reaction.getRate().doubleValue());
			sb.append(reaction.getRateExpression());
			sb.append(" ]-> ");
		}
		else {
			//TODO: update for ARBITRARY
			throw new UnsupportedOperationException("Unsupported encoding for the reaction:"+reaction);
		}
		/*else{
			sb.append(" -[fr ");
			StringTokenizer st = new StringTokenizer(reaction.getRateExpression());//Hill k5 Ka n3
			String mainSpecies = reaction.getReagents().getFirstReagent().getNameAlphanumeric(); // in BNGL, the first species is the "main one". 
			st.nextToken();
			String k = st.nextToken();
			String K = st.nextToken();
			String n = st.nextToken();
			String otherReactants=reaction.getReagents().toMultiSetWithAlphaNumericNames();
			int firstPlus=otherReactants.indexOf("+");
			if(firstPlus!=-1){
				otherReactants=otherReactants.substring(firstPlus+1).trim();
			}
			else{
				otherReactants="emptyComposite";
			}
			
			//Hill(P53,k5,Ka,n3)
			sb.append("Hill(");
			sb.append(mainSpecies);sb.append(",");
			sb.append(otherReactants);sb.append(",");
			sb.append(crn.getMath().evaluate(k));sb.append(",");
			sb.append(crn.getMath().evaluate(K));sb.append(",");
			sb.append(crn.getMath().evaluate(n));sb.append(")");
			sb.append(" ]-> ");
		}*/

		sb.append(reaction.getProducts().toMultiSetWithAlphaNumericNames());

		return sb.toString();
	}

}
