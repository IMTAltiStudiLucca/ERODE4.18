function epsForMaxError(erodeMatlabScript,csvFile,max_allowed_slopes)
    clear(erodeMatlabScript);
    
    fprintf('Loading model at time %s ... ', datestr(now,'HH:MM:SS.FFF'))
    
    min_eps_increment=1e-6;
    tolerance_espCLump=min_eps_increment;   
    %max_eps=1e4;
    max_eps=50;
    
    [x0,J,N,~,M0,driftName,modelName,maxPerturbation] = feval(erodeMatlabScript);
    clear(driftName);
    
    %M0 = (orth(M0'))';
    orth_M0P_P=(orth(M0'))';
        
    fprintf('completed at time %s\n', datestr(now,'HH:MM:SS.FFF'))
    
    %how many Ji do we have
    %k = size(J,1); 
    %This is a function to remove the zero matrices from J
    [J,k] = removeZeroJ(J,N);
    
    fprintf('Jacobian loaded and cleaned at time %s\n', datestr(now,'HH:MM:SS.FFF'))
    fprintf('  We have %d Ji\n\n',k);
    
    fprintf('Performing the computations for the maximum allowed error for slope percentage %d at time %s\n',  datestr(now,'HH:MM:SS.FFF'))
    norm_fx0=norm(feval(driftName,0,x0));
    compactum_bound=norm(x0);
    %compactum_bound=mean(abs(x0));
    %compactum_bound=max(300,norm_fx0);
    fprintf('\t Terminated at %s: with norm(f(x0)) %d\n',datestr(now,'HH:MM:SS.FFF'),norm_fx0);
    %max_allowed_error=computeMaxAllowedError(norm_fx0,max_allowed_slope_percentage);
    %fprintf('\t Terminated at %s: with max allowed error %d\n',datestr(now,'HH:MM:SS.FFF'),max_allowed_error)
    
    use_avg_err=1;
    
    fprintf('\n');
    
    %slopes=[0.1,0.2];
    for i=1:length(max_allowed_slopes)
        max_allowed_slope_percentage=max_allowed_slopes(i);
        
        beginTime=now;
        eps_increment=0.1;
        first_epsilon=0;%eps_increment;
        epsilon=first_epsilon;
        consideredEpsilons=0;
        endLastEps=now;
        beginLastEps=endLastEps;

        max_allowed_error=computeMaxAllowedError(norm_fx0,max_allowed_slope_percentage);
        fprintf('Max allowed error %d for max allowed slope %d (%s)\n',max_allowed_error,max_allowed_slope_percentage,datestr(beginLastEps,'HH:MM:SS.FFF'));
        
        %error_comparison_tol=max_allowed_error/10;
        error_comparison_tol=max_allowed_error/100;
        if(error_comparison_tol==0)
            error_comparison_tol=tolerance_espCLump;
        end        
        
        
        chosen_epsilon=0;
        chosen_avg_err=0;
        chosen_max_err=0;
        chosen_nRows=-1;
        clump_nRows=-1;

        should_continue=1;
        while should_continue
            consideredEpsilons=consideredEpsilons+1;
            beginLastEps=now;
            fprintf('Computing epsCLump at (%s) for epslion=%d\n',datestr(now,'HH:MM:SS.FFF'),epsilon);
            [avg_err,max_err,nRows,M]=epsCLump(epsilon,orth_M0P_P,J,k,modelName,driftName,tolerance_espCLump,compactum_bound);
            endLastEps=now;
            if use_avg_err
                err=avg_err;
            else
                err=max_err;
            end
            fprintf('Computed epsCLump at (%s): nRows=%d, epslion=%d, error=%d, max_allowed_error=%d\n',datestr(now,'HH:MM:SS.FFF'),nRows,epsilon,err,max_allowed_error);
            if(epsilon == 0)
                clump_nRows=nRows;
            end
            
            current_eps=epsilon;
            if or(or(abs(err - max_allowed_error) < error_comparison_tol,err < max_allowed_error),epsilon==0)
                chosen_epsilon=epsilon;
                chosen_err=err;
                chosen_avg_err=avg_err;
                chosen_max_err=max_err;
                chosen_nRows=nRows;
                chosen_M=M;

                begin_time_chosen_epsilon=beginLastEps;
                end_time_chosen_epsilon=endLastEps;
                
                if abs(err - max_allowed_error) < error_comparison_tol
                    fprintf(' ERROR EQUAL to maximum allowed one (%s).\n',datestr(now,'HH:MM:SS.FFF'));
                    should_continue=0;
                elseif err < max_allowed_error
                    fprintf(' ERROR BELOW the maximum allowed one. We store it but we check for larger epsilons satisfying it as well (%s).\n',datestr(now,'HH:MM:SS.FFF'));
                    epsilon=epsilon+eps_increment;
                end
            end   
            if err > max_allowed_error
                fprintf(' ERROR ABOVE the maximum allowed one. We revert to previous epsilon, and use smaller increments.\n');
                epsilon=epsilon-eps_increment;
                eps_increment=eps_increment/2;
                epsilon=epsilon+eps_increment;
            end

            if should_continue==1
                if eps_increment < min_eps_increment
                    fprintf('We terminate because the epsilon increment (%d) has reached the minimum one (%d)\n',eps_increment,min_eps_increment);
                    should_continue=0;
                elseif current_eps==epsilon
                    fprintf('We terminate because epsilon cannot be changed anymore due to precision issues (epsilon=%d, eps_increment=%d)\n',epsilon,eps_increment);
                    should_continue=0;
                elseif epsilon >= max_eps
                    fprintf('We terminate because epsilon (%d) has reached the maximum one (%d)\n',epsilon,max_eps);
                    should_continue=0;
                elseif epsilon < 0
                    fprintf('We terminate because epsilon (%d) became negative.\n',epsilon);
                    should_continue=0;    
                end                
            end
        end
        fprintf('\n\n');

        endTime=now;

 		fprintf('The procedure terminated at (%s) with nRows=%d epslion=%d, error=%d, max_allowed_error=%d\n',datestr(now,'HH:MM:SS.FFF'),nRows,chosen_epsilon,chosen_err,max_allowed_error)

        %The computed chosen_M does not contain explicitly the rows
        %required in M0. We 'add them back'
        %chosen_M=addBackRequiredRows(M0,chosen_M);
        
		[et,perc_et,normM_xt]=solve_and_compute_error(chosen_M,driftName,[0 30.0],x0,M0,chosen_epsilon,max_allowed_slope_percentage);   
        
        fprintf('The error computation terminated at (%s) with et=%d, perc_et=%d\n',datestr(now,'HH:MM:SS.FFF'),et,perc_et)
        
        addCaption=0;
        if ~isfile(csvFile)
            addCaption=1;
        end
        
        fprintf('\n')
        fid = fopen(csvFile, 'a');
        if(addCaption)
            fprintf(fid,'modelName,maxPerturbation,size,clump_nRows,nRows,et,et_rel,|M*xt|_2,epsilon,max_allowed_slope,avg_err,max_err,max_allowed_err,compactum_bound,norm_fx0,consideredEpsilons,tolerance,secThisEpsilon,secTotal\n');
            fprintf('Caption added to CSV file %s\n',csvFile);
        end
        fprintf(fid,"%s,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%s,%s\n",modelName,maxPerturbation,size(x0,1),clump_nRows,chosen_nRows,et,perc_et,normM_xt,chosen_epsilon,max_allowed_slope_percentage,chosen_avg_err,chosen_max_err,max_allowed_error,compactum_bound,norm_fx0,consideredEpsilons,tolerance_espCLump,etime(datevec(end_time_chosen_epsilon),datevec(begin_time_chosen_epsilon)),etime(datevec(endTime),datevec(beginTime)));
        fclose(fid);
        fprintf('Line added to CSV file %s\n\n\n',csvFile);
    end
end

function [avg_err,max_err,nRows,M]=epsCLump(epsilon,orth_M0P_P,J,k,modelName,driftName,tolerance,compactum_bound)
    %diary('myDiary')
    
    
    
    beginTime = now;
    %fprintf('epsCLump invoked at time %s\n',datestr(beginTime,'HH:MM:SS.FFF'))
    %fprintf('\tepsilon=%d,erodeMatlabScript=%s\n',epsilon,erodeMatlabScript)

    %J is a list of J0, J1, J2, ...
    %N is the number of variables
    %epsilon is the epsilon
    %M0 are the constraints to use in constrained lumping
    
%     [J,N,~,M0,driftName,modelName,maxPerturbation] = feval(erodeMatlabScript);
%     clear(driftName);
%         
%     fprintf('Jacobian loaded at time %s\n', datestr(now,'HH:MM:SS.FFF'))
%     
%     %how many Ji do we have
%     %k = size(J,1); 
%     %This is a function to remove the zero matrices from J
%     [J,k] = removeZeroJ(J,N);
%     
%     fprintf('Jacobian loaded and cleaned at time %s\n', datestr(now,'HH:MM:SS.FFF'))
%     fprintf('  We have %d Ji\n',k);

    %A simple default M0 where I want to sum the last two variables
    %M0 = zeros(1,N);
    %M0(1,N-1)=1;
    %M0(1,N  )=1;
    %disp(M0);

    %Compute orthonormal rows spanning spanning the row space 
    %of M0 and store them as M0 (use a numerically stable algorithm)
    %M0 = (orth(M0'))'; % now this is precomputed before invoking all
    %epsclump for this model (for different epsilons). Because it does not
    %depend on the used epsilon
    %disp(M0);
    
    %tolerance = 1e-10;
    %tolerance = 1e-6;
    %For e2 it changes whether we use 1e-11 or 2e-11
    %tolerance = 1e-11;
    %tolerance = 2e-11;
    % if epsilon > 0
    %     tolerance = min(tolerance,epsilon/10.0);
    % end
    beginEpsTolTime = now;
    fprintf("\tComputation for epsilon=%d and tolerance=%d started at %s\n",epsilon,tolerance,datestr(beginEpsTolTime,'HH:MM:SS.FFF'));

    %I precompute M^t and M^t * M.
    % This will be updated every time we append one row to M
    % we could preallocate memory for M, there should be at most N rows.
    %M=M0;
    M=orth_M0P_P;
    Mtransp = M';
    MtranspM = Mtransp*M;
    nRows=size(M,1);

    %I begin my iterations
    shouldContinue = 1;
    iter=0;
    while shouldContinue
        iter=iter+1;
        beginIterTime=now;
        fprintf('\t  Iteration %d started at %s with %d rows in M. ',iter,datestr(beginIterTime,'HH:MM:SS.FFF'),nRows);
        shouldContinue=0;
        %disp(M);
        for i=1:1:k
            %Now I consider J{i}
            %is size(M,1) recomputed everytime we change M?
            nRows=size(M,1);
            for rindex = 1:1:nRows
                %Now I compute p
                %p := rJi dot M T dot M
                r = M(rindex,:);
                rJi = r*J{i};
                p = rJi*MtranspM; %p = rJi(M(1:k,:))'*M(1:k,:)

                %Now we check if we have to add a new row to M
                dist = norm(rJi - p);
                if(dist - tolerance >= epsilon)
                    nRows=nRows+1;

                    %The orth ensures numerical stability, but it is
                    %computationally intensive. We will change it later on
                    M=[M;rJi];  %M(nRows,:)=rJi;
                    M = (orth(M'))'; %M(1:k,:) = orth((M(1:k,:))')'                    

                    %aux = (rJi - p)/norm(rJi - p);
                    %M=[M;aux];

                    Mtransp = M';
                    MtranspM = Mtransp*M;
                    shouldContinue=1;
                end
            end
        end
        endIterTime=now;
        fprintf("Terminated in %s time with %d rows for epsilon %d\n",datestr(endIterTime-beginIterTime,'HH:MM:SS.FFF'),nRows,epsilon);
    end
        
    endTime = now;
    fprintf("\n\tTerminated %s with %d rows for epsilon=%d and tolerance=%d\n",modelName,size(M,1),epsilon,tolerance);
    fprintf('\t The computation for this epsilon required %d iterations in %s time (it terminated at %s).\n',iter,datestr(endTime-beginEpsTolTime,'HH:MM:SS.FFF'),datestr(endTime,'HH:MM:SS.FFF'));
    fprintf('\t Overall this model took %s time\n',datestr(endTime-beginTime,'HH:MM:SS.FFF'));
    %Finally, I print M
    %fprintf('We computed M:\n')
    %disp(M)
    %diary off

    [avg_err,max_err] = computeErrors(M, 100, compactum_bound,driftName);
    %fprintf('Avg error: %d, Max error: %d\n',avg_err,max_err)
%    
%     addCaption=0;
%     if ~isfile(csvFile)
%         addCaption=1;
%     end
%     
%     fprintf('\n')
%     fid = fopen(csvFile, 'a');
%     if(addCaption)
%         fprintf('Caption added to CSV file %s\n',csvFile);
%         fprintf(fid,'modelName,maxPerturbation,epsilon,tolerance,nRows,avg_err,max_err,iteration,msThisEpsilon,msTotal\n');
%     end
%     fprintf(fid,"%s,%d,%d,%d,%d,%d,%d,%d,%s,%s\n",modelName,maxPerturbation,epsilon,tolerance,nRows,avg_err,max_err,iter,milliseconds(endTime-beginEpsTolTime),milliseconds(endTime-beginTime));
%     fclose(fid);
%     fprintf('Line added to CSV file %s\n\n\n',csvFile);

end

function [max_allowed_error] = computeMaxAllowedError(norm_fx0,max_allowed_slope_percentage)

    %IC
    %x0=[1,2,4,5];
    
    %This is the maximum allowed percentage of the slope at time point 0
    %that we allow for: [0,1] = 0,100%. But we can even have more than 100%
    %if needed
    %We decide this value. The smaller it is, the smaller will be the
    %accepted error
    %max_allowed_slope_percentage 
    
    
    %norm_fx0=norm(feval(driftName,0,x0));
    
    max_allowed_error=max_allowed_slope_percentage*norm_fx0;
   
    %avg_err should be smaller than max_allowed_error
end