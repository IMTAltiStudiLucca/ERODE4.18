package it.imt.erode.importing;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;

import org.eclipse.ui.console.MessageConsoleStream;

import it.imt.erode.commandline.CRNReducerCommandLine;
import it.imt.erode.commandline.IMessageDialogShower;
import it.imt.erode.crn.interfaces.ICRN;
import it.imt.erode.crn.interfaces.ICRNReaction;
import it.imt.erode.crn.interfaces.IComposite;
import it.imt.erode.crn.interfaces.ISpecies;
import it.imt.erode.crn.label.EmptySetLabel;
import it.imt.erode.crn.label.ILabel;
import it.imt.erode.partition.interfaces.IBlock;
import it.imt.erode.partition.interfaces.IPartition;
import it.imt.erode.partitionrefinement.algorithms.SMTExactFluidBisimilarity;


/**
 * 
 * @author Andrea Vandin
 * This class is used to export reaction networks in questions "is the partition an OFL/EFL/EROFL/EREFL" the input format of z3 (file extension: .z3).
 *  
 */
public class z3Importer extends AbstractImporter{

	public static final String z3EncodingsFolder = "."+File.separator+"z3Encodings"+File.separator;

	/*private static final String minZ3 = "(define-fun myMin ((x Real) (y Real)) Real\n" + 
		     "  (ite (< x y)\n" + 
		     "          x\n" +
		     "          y\n" +
		     "  )\n" +
		     ")\n" ; //+  "(echo \"Min defined...\")\n";*/
	
	public z3Importer(String fileName,MessageConsoleStream out,BufferedWriter bwOut,IMessageDialogShower msgDialogShower) {
		super(fileName,out,bwOut,msgDialogShower);
	}

/*	private static void write(BufferedWriter bw, String line) throws IOException{
		bw.write(line);
		bw.write("\n");
	}*/

	public static String nameInZ3(ISpecies species){
		//return "s"+species.getID();
		//return "s"+species.getID()+"-"+species.getNameSupportedByMathEval();
		return nameInZ3(species, "s", 0);
	}
	
	public static String nameInZ3(ISpecies species, String varsName, int incrementOnId) {
		return varsName+(species.getID()+incrementOnId);
	}
	
	public static String nameInZ3(ILabel label){
		if(label.equals(EmptySetLabel.EMPTYSETLABEL)){
			return "empty";
		}
		else{
			return "ls"+((ISpecies)label).getLabelID();
		}
	}
	
	public static String odeVarNameInZ3(ISpecies species){
		return "ds"+species.getID();
		//return "s"+species.getID()+"-"+species.getNameSupportedByMathEval();
	}

	/*private static Status check(Solver solver) throws Z3Exception{
		long begin = System.currentTimeMillis();
		Status status = solver.Check();
		long end = System.currentTimeMillis();
		double runtimeCheck = (double)(end-begin) / 1000.0;
		CRNReducerCommandLine.println(out,bwOut,"\n\nTime for check in seconds: "+runtimeCheck);
		CRNReducerCommandLine.println(out,bwOut,"The formula is: "+status.name());
		//CRNReducerCommandLine.println(out,bwOut,"\n\n");
		if (status == Status.SATISFIABLE){
			CRNReducerCommandLine.println(out,bwOut,"\n\nThis is the returned model:");
			CRNReducerCommandLine.println(out,bwOut,solver.Model());
			CRNReducerCommandLine.println(out,bwOut,"\n\n");
		}
		return status;
	}*/
		
	public static void printCRNToz3FileODEsASCONSTANTS(ICRN crn, String name, IPartition partition, boolean verbose, String question,MessageConsoleStream out,BufferedWriter bwOut) throws UnsupportedFormatException{
		//question is OFL,EFL (WITH THIS WE CANNOT DO EREFL and EROFL)
		String fileName = AbstractImporter.overwriteExtensionIfEnabled(name,".z3");

		if(verbose){
			CRNReducerCommandLine.println(out,bwOut,"Writing model in file "+fileName);
		}

		createParentDirectories(fileName);
		BufferedWriter br;
		try {
			br = new BufferedWriter(new FileWriter(fileName));
		} catch (IOException e) {
			CRNReducerCommandLine.println(out,bwOut,"Problems in printCRNToz3File, exception raised while creating the filewriter for file: "+fileName);
			CRNReducerCommandLine.printStackTrace(out,bwOut,e);
			return;
		}

		try {

			DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
			Date date = new Date();
			//CRNReducerCommandLine.println(out,bwOut,dateFormat.format(date)); //2014/08/06 15:59:48
			br.write("; Date: "+dateFormat.format(date)+"\n");
			if(crn.getName()!=null && !crn.getName().equals("")){
				br.write("; Automatically generated by "+CRNReducerCommandLine.TOOLNAME+" starting from the model "+crn.getName()+"\n");
			}
			else{
				br.write("; Automatically generated by "+CRNReducerCommandLine.TOOLNAME+"\n");
			}
			br.write(";  "+crn.getSpecies().size()+" species, "+crn.getReactions().size()+" reactions\n");
			br.write("; Question: "+question);
			br.write("\n");

			//br.write("\n");
			//br.write(minZ3);

			/*StringBuilder odesArgumentsSB = new StringBuilder();
					StringBuilder spaceSeparatedSpeciesSB = new StringBuilder();
					StringBuilder spaceSeparatedSpeciesSigmaSB = new StringBuilder();*/
			br.write("\n");
			br.write(";Declare a positive real constant per species\n");
			for (ISpecies species : crn.getSpecies()) {
				//String supportedName = species.getNameSupportedByMathEval();
				String supportedName = nameInZ3(species);
				br.write("(declare-const " + supportedName + " Real)\n");
				br.write("(assert (> " + supportedName + " 0.0))\n");

				//Prepare the arguments for the ODEs.
				/*odesArgumentsSB.append("("+ supportedName +" Real) ");
						//Prepare space separated species
						//spaceSeparatedSpeciesSB.append(supportedName+" ");
						spaceSeparatedSpeciesSigmaSB.append(supportedName+"_S ");*/
			}
			br.write("(echo \"Species declared...\")\n\n");
			/*String odesArgs = odesArgumentsSB.toString();
					odesArgumentsSB=null;
					String spaceSeparatedSpecies=spaceSeparatedSpeciesSB.toString();
					spaceSeparatedSpeciesSB=null;
					String spaceSeparatedSpeciesSigma=spaceSeparatedSpeciesSigmaSB.toString();
					spaceSeparatedSpeciesSigmaSB=null;*/


			//Declare a positive real constant per symbolic (i.e., unspecified) rate
			/*command = "red in " + rootModule + " : RatesToZ3(rates("+modelName+")) .\n";
					maude.send(command);
					z3Encoding[i]=	maude.maudeStepReduceOrRewrite();
					z3Encoding[i]=z3Encoding[i].substring("result String: \"".length(), z3Encoding[i].length()-1);
					z3Encoding[i]=z3Encoding[i].replace("NEWLINE", "\n");
					i++;*/


			writeODEsFast(crn, br,"");


			//Write the question for OFL, EFL, EROFL or EREFL of the current partition
			if(question.equalsIgnoreCase("EFL")){
				IBlock currentBlock = partition.getFirstBlock();
				while(currentBlock!=null){
					if(currentBlock.getSpecies().size()==1){
						br.write("; singleton block ");
						//br.write(currentBlock.getRepresentative().getNameSupportedByMathEval());
						br.write(nameInZ3(currentBlock.getRepresentative()));
						br.write("\n");
					}
					else{
						br.write("(assert (= ");
						for (ISpecies species : currentBlock.getSpecies()) {
							//br.write(species.getNameSupportedByMathEval());
							br.write(nameInZ3(species));
							br.write(" ");
						}
						br.write("))\n");
					}
					currentBlock=currentBlock.getNext();
				}
				br.write("(echo \"Initial conditions coherent with the EFL partition setted...\")\n\n");

				//The negation of EFL conjecture
				br.write("(assert (not (and \n");//18

				currentBlock = partition.getFirstBlock();
				while(currentBlock!=null){
					if(currentBlock.getSpecies().size()==1){
						br.write("                  true\n");
					}
					else{
						//                  (= dA dB )
						br.write("                  (= ");
						for (ISpecies species : currentBlock.getSpecies()) {
							//br.write("(d"+species.getNameSupportedByMathEval()+" ");
							/*br.write("(d"+nameInZ3(species)+" ");
									br.write(spaceSeparatedSpecies);
									br.write(") ");*/
							br.write("d"+nameInZ3(species)+" ");

						}
						br.write(")\n");
					}
					currentBlock=currentBlock.getNext();
				}
				br.write("             )\n");
				br.write("        )\n");
				br.write(")\n"); 

				br.write("(echo \"Negation of EFL conjecture asserted...\")\n\n");

			}
			else if(question.equalsIgnoreCase("OFL")){
				IBlock currentBlock = partition.getFirstBlock();
				while(currentBlock!=null){
					br.write("(define-const ");
					//br.write(currentBlock.getRepresentative().getNameSupportedByMathEval());
					br.write(nameInZ3(currentBlock.getRepresentative()));
					br.write("_S Real ");
					if(currentBlock.getSpecies().size()==1){
						//br.write(currentBlock.getRepresentative().getNameSupportedByMathEval());
						br.write(nameInZ3(currentBlock.getRepresentative()));
						br.write(")\n");
					}
					else{
						br.write("(+ ");
						for (ISpecies species : currentBlock.getSpecies()) {
							//br.write(species.getNameSupportedByMathEval());
							br.write(nameInZ3(species));
							br.write(" ");
						}
						br.write("))\n");
						for (ISpecies species : currentBlock.getSpecies()) {
							if(!species.equals(currentBlock.getRepresentative())){
								br.write("(define-const ");
								//br.write(species.getNameSupportedByMathEval());
								br.write(nameInZ3(species));
								br.write("_S Real 0.0)\n");
							}
						}
					}
					currentBlock=currentBlock.getNext();
				}
				br.write("(echo \"Variables for populations assigned to representative of each block created...\")\n\n");

				writeODEsFast(crn, br,"_S");
				br.write("(echo \"ODEs for populations assigned to representative of each block created...\")\n\n");

				//The negation of OFL conjecture
				br.write("(assert (not (and \n");//18

				currentBlock = partition.getFirstBlock();
				while(currentBlock!=null){
					br.write("                  (= (+ ");
					for (ISpecies species : currentBlock.getSpecies()) {
						//br.write("(d"+species.getNameSupportedByMathEval()+" ");
						/*br.write("(d"+nameInZ3(species)+" ");
								br.write(spaceSeparatedSpeciesSigma);
								br.write(") ");*/
						br.write("d"+nameInZ3(species)+"_S ");
					}
					br.write(") ");
					br.write(" (+ ");
					for (ISpecies species : currentBlock.getSpecies()) {
						//br.write("(d"+species.getNameSupportedByMathEval()+" ");
						br.write("d"+nameInZ3(species)+" ");
						/*br.write("(d"+nameInZ3(species)+" ");
								br.write(spaceSeparatedSpecies);
								br.write(") ");*/
					}
					br.write("))\n");
					currentBlock=currentBlock.getNext();
				}
				br.write("              )\n");
				br.write("        )\n");
				br.write(")\n"); 

				br.write("(echo \"Negation of OFL conjecture asserted...\")\n\n");
			}

			//Finished
			br.write("(check-sat)\n;(get-model)\n(echo \"End\")\n(get-info :all-statistics)\n\n");
			br.write("(echo \"Encoding completed\")\n");
		} catch (IOException e) {
			CRNReducerCommandLine.println(out,bwOut,"Problems in printCRNToz3File, exception raised while writing in the file: "+fileName);
			CRNReducerCommandLine.printStackTrace(out,bwOut,e);
			return;
		}
		finally{
			if(verbose){
				CRNReducerCommandLine.println(out,bwOut,"Writing reactions in file "+fileName+" completed");
			}
			try {
				br.close();
			} catch (IOException e) {
				CRNReducerCommandLine.println(out,bwOut,"Problems in printCRNToz3File, exception raised while closing the bufferedwriter of the file: "+fileName);
				CRNReducerCommandLine.printStackTrace(out,bwOut,e);
			}
		}
	}


	
	private static void writeODEsFast(ICRN crn, BufferedWriter br, String suffix)
			throws IOException {
		
		HashSet<String> symbolicParameters = new HashSet<>(crn.getSymbolicParameters());
		ISpecies[] speciesIdToSpecies = new ISpecies[crn.getSpecies().size()];
		crn.getSpecies().toArray(speciesIdToSpecies);
		HashMap<String, ISpecies> speciesNameToSpecies = new HashMap<String, ISpecies>(crn.getSpecies().size());
		for (ISpecies species : crn.getSpecies()) {
			speciesNameToSpecies.put(species.getName(), species);
		}
		
		br.write(";declare one ODE per species. \n");
		//declare one ODE per species/local state. An ODE is a function taking in input one real per species/local state and one per simbolic rate
		/*command = "red in " + rootModule + " : ODEsToZ3(ODEs("+modelName+"),("+ elements+"ToZ3ODEsArguments("+elements+"("+modelName+")) + RatesToZ3ODEsArguments(rates("+modelName+"))" +")) .\n";
		maude.send(command);
		z3Encoding[i]=	maude.maudeStepReduceOrRewrite();
		//CRNReducerCommandLine.println(out,bwOut,z3Encoding[i]);
		z3Encoding[i]=z3Encoding[i].substring("result String: \"".length(), z3Encoding[i].length()-1);
		//Remove scientific notation
		z3Encoding[i]=removeHighlightedScientificNotation(z3Encoding[i]);
		z3Encoding[i]=z3Encoding[i].replace("NEWLINE", "\n");
		i++;*/
		HashMap<ISpecies,StringBuilder> odeBodies = new HashMap<ISpecies, StringBuilder>(crn.getSpecies().size());
		/*for (ISpecies species : crn.getSpecies()) {
			odeBodies.put(species, new StringBuilder("(+ 0.0 "));
		}*/
		//System.out.println("\n");
		for (ICRNReaction reaction : crn.getReactions()) {
			String rate =  SMTExactFluidBisimilarity.computez3RateExpressionString(crn, reaction, suffix,speciesIdToSpecies,speciesNameToSpecies,symbolicParameters);
			//String massAction = "(* " + reaction.getRate().toPlainString() + " " + reaction.getReagents().getSpaceSeparatedMultisetUsingIdsAsNames("s",suffix) ;
			//System.out.println(rate);
			//System.out.println(massAction);
			//System.out.println("\n");
			IComposite net = reaction.computeProductsMinusReagents();
			for(int i=0;i<net.getNumberOfDifferentSpecies();i++){
				StringBuilder sb = odeBodies.get(net.getAllSpecies(i));
				if(sb==null){
					sb = new StringBuilder("(+");
					odeBodies.put(net.getAllSpecies(i), sb);
				}
				sb.append(" ");
				if(net.getMultiplicities(i)==1 ){
					sb.append(rate);
				}
				else {
					sb.append("(* ");
					sb.append(net.getMultiplicities(i));
					sb.append(" ");
					sb.append(rate);
					sb.append(")");
				}
			}
			
			/*IComposite reagents = reaction.getReagents();
			IComposite products = reaction.getProducts();
			for(int i=0;i<reagents.getNumberOfDifferentSpecies();i++){
				StringBuilder sb = odeBodies.get(reagents.getAllSpecies(i));
				sb.append(" ");
				sb.append(rate);
				sb.append(" -"+reagents.getMultiplicities(i)+")");
			}
			for(int i=0;i<products.getNumberOfDifferentSpecies();i++){
				StringBuilder sb = odeBodies.get(products.getAllSpecies(i));
				sb.append(" ");
				sb.append(rate);
				sb.append(" "+products.getMultiplicities(i)+")");
			}*/
		}

		StringBuilder sbEmpty = new StringBuilder("(+ 0");
		for (ISpecies species : crn.getSpecies()) {
			//String odeVar = "d" + species.getNameSupportedByMathEval();
			String odeVar = "d" + nameInZ3(species)+suffix;
			//br.write("(define-fun " + odeVar + " ( "+ odesArgs +")" + " Real \n");
			//br.write("(define-const " + odeVar  + " Real \n");
			
			br.write("(define-const " + odeVar  + " Real \n");
			/*br.write("(declare-const " + odeVar  + " Real) \n");
			br.write("(assert (= "+odeVar+" ");*/
			//(declare-const ds0 Real)
			//(assert (= ds0 (+ 0.0  (* 6.0  s0 -1) (* 2.0  s0 -1))))
			StringBuilder sb = odeBodies.get(species);
			if(sb==null){
				sb=sbEmpty;
			}
			br.write("\t"+sb.toString());
			//br.write("))");
			br.write(")\n");
			br.write(")\n");
		}
		br.write("(echo \"ODEs defined...\")\n\n");
	}

	public static void printCRNToz3File(ICRN crn, String name, IPartition partition, boolean verbose, String question,MessageConsoleStream out,BufferedWriter bwOut) throws UnsupportedFormatException{
		//question is OFL,EFL,EROFL,EREFL
		String fileName = AbstractImporter.overwriteExtensionIfEnabled(name,".z3");

		if(verbose){
			CRNReducerCommandLine.println(out,bwOut,"Writing model in file "+fileName);
		}

		createParentDirectories(fileName);
		BufferedWriter br;
		try {
			br = new BufferedWriter(new FileWriter(fileName));
		} catch (IOException e) {
			CRNReducerCommandLine.println(out,bwOut,"Problems in printCRNToz3File, exception raised while creating the filewriter for file: "+fileName);
			CRNReducerCommandLine.printStackTrace(out,bwOut,e);
			return;
		}

		try {

			DateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
			Date date = new Date();
			//CRNReducerCommandLine.println(out,bwOut,dateFormat.format(date)); //2014/08/06 15:59:48
			br.write("; Date: "+dateFormat.format(date)+"\n");
			if(crn.getName()!=null && !crn.getName().equals("")){
				br.write("; Automatically generated by "+CRNReducerCommandLine.TOOLNAME+" starting from the model "+crn.getName()+"\n");
			}
			else{
				br.write("; Automatically generated by "+CRNReducerCommandLine.TOOLNAME+"\n");
			}
			br.write(";  "+crn.getSpecies().size()+" species, "+crn.getReactions().size()+" reactions\n");
			br.write("; Question: "+question);
			br.write("\n");

			//br.write("\n");
			//br.write(minZ3);

			StringBuilder odesArgumentsSB = new StringBuilder();
			StringBuilder spaceSeparatedSpeciesSB = new StringBuilder();
			StringBuilder spaceSeparatedSpeciesSigmaSB = new StringBuilder();
			br.write("\n");
			br.write(";Declare a positive real constant per species\n");
			for (ISpecies species : crn.getSpecies()) {
				//String supportedName = species.getNameSupportedByMathEval();
				String supportedName = nameInZ3(species);
				br.write("(declare-const " + supportedName + " Real)\n");
				br.write("(assert (> " + supportedName + " 0.0))\n");

				//Prepare the arguments for the ODEs.
				odesArgumentsSB.append("("+ supportedName +" Real) ");
				//Prepare space separated species
				spaceSeparatedSpeciesSB.append(supportedName+" ");
				spaceSeparatedSpeciesSigmaSB.append(supportedName+"_S ");
			}
			br.write("(echo \"Species declared...\")\n");
			String odesArgs = odesArgumentsSB.toString();
			odesArgumentsSB=null;
			String spaceSeparatedSpecies=spaceSeparatedSpeciesSB.toString();
			spaceSeparatedSpeciesSB=null;
			String spaceSeparatedSpeciesSigma=spaceSeparatedSpeciesSigmaSB.toString();
			spaceSeparatedSpeciesSigmaSB=null;


			//Declare a positive real constant per symbolic (i.e., unspecified) rate
			/*command = "red in " + rootModule + " : RatesToZ3(rates("+modelName+")) .\n";
			maude.send(command);
			z3Encoding[i]=	maude.maudeStepReduceOrRewrite();
			z3Encoding[i]=z3Encoding[i].substring("result String: \"".length(), z3Encoding[i].length()-1);
			z3Encoding[i]=z3Encoding[i].replace("NEWLINE", "\n");
			i++;*/

			br.write("\n");
			br.write(";declare one ODE per species. An ODE is a function taking in input one real per species and one per symbolic rate (RATES CURRENTLY UNSUPPORTED)\n");
			//declare one ODE per species/local state. An ODE is a function taking in input one real per species/local state and one per simbolic rate
			/*command = "red in " + rootModule + " : ODEsToZ3(ODEs("+modelName+"),("+ elements+"ToZ3ODEsArguments("+elements+"("+modelName+")) + RatesToZ3ODEsArguments(rates("+modelName+"))" +")) .\n";
			maude.send(command);
			z3Encoding[i]=	maude.maudeStepReduceOrRewrite();
			//CRNReducerCommandLine.println(out,bwOut,z3Encoding[i]);
			z3Encoding[i]=z3Encoding[i].substring("result String: \"".length(), z3Encoding[i].length()-1);
			//Remove scientific notation
			z3Encoding[i]=removeHighlightedScientificNotation(z3Encoding[i]);
			z3Encoding[i]=z3Encoding[i].replace("NEWLINE", "\n");
			i++;*/
			for (ISpecies species : crn.getSpecies()) {
				//String odeVar = "d" + species.getNameSupportedByMathEval();
				String odeVar = "d" + nameInZ3(species);
				br.write("(define-fun " + odeVar + " ( "+ odesArgs +")" + " Real \n");

				//br.write(" ODEBodyToZ3(odeBody) " + " )\n");
				br.write(" (+ 0.0 ");
				for (ICRNReaction reaction : crn.getReactions()) {
					int netStoc = reaction.getProducts().getMultiplicityOfSpecies(species) - reaction.getReagents().getMultiplicityOfSpecies(species);
					if(netStoc !=0 ){
						br.write("(* "+netStoc);
						br.write(" ");
						br.write(reaction.getRate().toPlainString());
						br.write(" ");
						//br.write(reaction.getReagents().getSpaceSeparatedMultiset());
						br.write(reaction.getReagents().getSpaceSeparatedMultisetUsingIdsAsNames("s",""));
						br.write(") ");
					}
				}
				br.write(")");
				br.write(" )\n");
			}
			br.write("(echo \"ODEs defined...\")\n\n");


			//Write the question for OFL, EFL, EROFL or EREFL of the current partition
			if(question.equalsIgnoreCase("EFL")){
				IBlock currentBlock = partition.getFirstBlock();
				while(currentBlock!=null){
					if(currentBlock.getSpecies().size()==1){
						br.write("; singleton block ");
						//br.write(currentBlock.getRepresentative().getNameSupportedByMathEval());
						br.write(nameInZ3(currentBlock.getRepresentative()));
						br.write("\n");
					}
					else{
						br.write("(assert (= ");
						for (ISpecies species : currentBlock.getSpecies()) {
							//br.write(species.getNameSupportedByMathEval());
							br.write(nameInZ3(species));
							br.write(" ");
						}
						br.write("))\n");
					}
					currentBlock=currentBlock.getNext();
				}
				br.write("(echo \"Initial conditions coherent with the EFL partition setted...\")\n\n");

				//The negation of EFL conjecture
				br.write("(assert (not (and \n");//18

				currentBlock = partition.getFirstBlock();
				while(currentBlock!=null){
					if(currentBlock.getSpecies().size()==1){
						br.write("                  true\n");
					}
					else{
						//                  (= (dA A B C D E ) (dB A B C D E ) )
						br.write("                  (= ");
						for (ISpecies species : currentBlock.getSpecies()) {
							//br.write("(d"+species.getNameSupportedByMathEval()+" ");
							br.write("(d"+nameInZ3(species)+" ");
							br.write(spaceSeparatedSpecies);
							br.write(") ");
						}
						br.write(")\n");
					}
					currentBlock=currentBlock.getNext();
				}
				br.write("             )\n");
				br.write("        )\n");
				br.write(")\n"); 

				br.write("(echo \"Negation of EFL conjecture asserted...\")\n\n");

			}
			else if(question.equalsIgnoreCase("OFL")){
				IBlock currentBlock = partition.getFirstBlock();
				while(currentBlock!=null){
					br.write("(define-const ");
					//br.write(currentBlock.getRepresentative().getNameSupportedByMathEval());
					br.write(nameInZ3(currentBlock.getRepresentative()));
					br.write("_S Real ");
					if(currentBlock.getSpecies().size()==1){
						//br.write(currentBlock.getRepresentative().getNameSupportedByMathEval());
						br.write(nameInZ3(currentBlock.getRepresentative()));
						br.write(")\n");
					}
					else{
						br.write("(+ ");
						for (ISpecies species : currentBlock.getSpecies()) {
							//br.write(species.getNameSupportedByMathEval());
							br.write(nameInZ3(species));
							br.write(" ");
						}
						br.write("))\n");
						for (ISpecies species : currentBlock.getSpecies()) {
							if(!species.equals(currentBlock.getRepresentative())){
								br.write("(define-const ");
								//br.write(species.getNameSupportedByMathEval());
								br.write(nameInZ3(species));
								br.write("_S Real 0.0)\n");
							}
						}
					}
					currentBlock=currentBlock.getNext();
				}
				br.write("(echo \"Variables for populations assigned to representative of each block created...\")\n\n");

				//The negation of OFL conjecture
				br.write("(assert (not (and \n");//18

				currentBlock = partition.getFirstBlock();
				while(currentBlock!=null){
					br.write("                  (= (+ ");
					for (ISpecies species : currentBlock.getSpecies()) {
						//br.write("(d"+species.getNameSupportedByMathEval()+" ");
						br.write("(d"+nameInZ3(species)+" ");
						br.write(spaceSeparatedSpeciesSigma);
						br.write(") ");
					}
					br.write(") ");
					br.write(" (+ ");
					for (ISpecies species : currentBlock.getSpecies()) {
						//br.write("(d"+species.getNameSupportedByMathEval()+" ");
						br.write("(d"+nameInZ3(species)+" ");
						br.write(spaceSeparatedSpecies);
						br.write(") ");
					}
					br.write("))\n");
					currentBlock=currentBlock.getNext();
				}
				br.write("              )\n");
				br.write("        )\n");
				br.write(")\n"); 

				br.write("(echo \"Negation of OFL conjecture asserted...\")\n\n");
			}

			//Finished
			br.write("(check-sat)\n;(get-model)\n(echo \"End\")\n(get-info :all-statistics)\n\n");
			br.write("(echo \"Encoding completed\")\n");
		} catch (IOException e) {
			CRNReducerCommandLine.println(out,bwOut,"Problems in printCRNToz3File, exception raised while writing in the file: "+fileName);
			CRNReducerCommandLine.printStackTrace(out,bwOut,e);
			return;
		}
		finally{
			if(verbose){
				CRNReducerCommandLine.println(out,bwOut,"Writing reactions in file "+fileName+" completed");
			}
			try {
				br.close();
			} catch (IOException e) {
				CRNReducerCommandLine.println(out,bwOut,"Problems in printCRNToz3File, exception raised while closing the bufferedwriter of the file: "+fileName);
				CRNReducerCommandLine.printStackTrace(out,bwOut,e);
			}
		}

	}

	

}
