function epsCLump(erodeMatlabScript,csvFile,requiredRows)
    %diary('myDiary')
    
    clear(erodeMatlabScript);
    
    beginTime = now;
    fprintf('epsCLump invoked at time %s\n', datestr(beginTime,'HH:MM:SS.FFF'))
    %J is a list of J0, J1, J2, ...
    %N is the number of variables
    %epsilon is the epsilon
    %M0 are the constraints to use in constrained lumping
    
    [J,N,epsilon,M0,driftName,modelName,maxPerturbation] = feval(erodeMatlabScript);
    clear(driftName);
        
    fprintf('Jacobian loaded at time %s\n', datestr(now,'HH:MM:SS.FFF'))
    
    %how many Ji do we have
    %k = size(J,1); 
    %This is a function to remove the zero matrices from J
    [J,k] = removeZeroJ(J,N);
    
    fprintf('Jacobian loaded and cleaned at time %s\n', datestr(now,'HH:MM:SS.FFF'))
    fprintf('  We have %d Ji\n',k);

    %A simple default M0 where I want to sum the last two variables
    %M0 = zeros(1,N);
    %M0(1,N-1)=1;
    %M0(1,N  )=1;
    %disp(M0);

    %Compute orthonormal rows spanning spanning the row space 
    %of M0 and store them as M0 (use a numerically stable algorithm)
    M0 = (orth(M0'))';
    %disp(M0);
    
    
    M=M0;
    epsilon=0;
    %requiredRows=6;
    while ~(size(M,1)==requiredRows)
        
        %tolerance = 1e-10;
        tolerance = 1e-6;
        %For e2 it changes whether we use 1e-11 or 2e-11
        %tolerance = 1e-11;
        %tolerance = 2e-11;
        if epsilon > 0
            tolerance = min(tolerance,epsilon/10.0);
        end
        beginEpsTolTime = now;
        fprintf('Computation for epsilon=%d and tolerance=%d started at %s\n',epsilon,tolerance,datestr(beginEpsTolTime,'HH:MM:SS.FFF'));

        %I precompute M^t and M^t * M.
        % This will be updated every time we append one row to M
        % we could preallocate memory for M, there should be at most N rows.
        M=M0;
        Mtransp = M';
        MtranspM = Mtransp*M;
        nRows=size(M,1);
        
        %I begin my iterations
        shouldContinue = 1;
        tooLarge=0;
        iter=0;
        while and(shouldContinue,~tooLarge)
            iter=iter+1;
            beginIterTime=now;
            fprintf('  Iteration %d started at %s with %d rows in M. ',iter,datestr(beginIterTime,'HH:MM:SS.FFF'),nRows);
            shouldContinue=0;
            %disp(M);
            for i=1:1:k
                %Now I consider J{i}
                %is size(M,1) recomputed everytime we change M?
                nRows=size(M,1);
                for rindex = 1:1:nRows
                    %Now I compute p
                    %p := rJi dot M T dot M
                    r = M(rindex,:);
                    rJi = r*J{i};
                    p = rJi*MtranspM; %p = rJi(M(1:k,:))'*M(1:k,:)

                    %Now we check if we have to add a new row to M
                    %fprintf('Inner iteration %d',iter);
                    dist = norm(rJi - p);
                    if(dist - tolerance >= epsilon)
                        nRows=nRows+1;

                        %The orth ensures numerical stability, but it is
                        %computationally intensive. We will change it later on
                        M=[M;rJi];  %M(nRows,:)=rJi;
                        M = (orth(M'))'; %M(1:k,:) = orth((M(1:k,:))')'                    

                        %aux = (rJi - p)/norm(rJi - p);
                        %M=[M;aux];

                        Mtransp = M';
                        MtranspM = Mtransp*M;

                        if(nRows>requiredRows)
                            tooLarge=1;
                            break;
                        else
                            shouldContinue=1;
                        end
                    end
                end
                if(tooLarge)
                    break;
                end
            end
            endIterTime=now;
            if(tooLarge)
                fprintf('Interrupted after %s time with %d rows (greater than the required %d) for epsilon %d\n',datestr(endIterTime-beginIterTime,'HH:MM:SS.FFF'),nRows,requiredRows,epsilon);
            else
                fprintf('Terminated in %s time with %d rows for epsilon %d\n',datestr(endIterTime-beginIterTime,'HH:MM:SS.FFF'),nRows,epsilon);
            end
        end
        epsilon=epsilon+0.1;
    end
    
    epsilon=epsilon-0.1;
    
    
    endTime = now;
    fprintf('\nTerminated %s with success (%d rows) for epsilon=%d and tolerance=%d\n',modelName,size(M,1),epsilon,tolerance)
    fprintf(' The computation for this epsilon required %d iterations with %d rows and %s time (it terminated at %s).\n',iter,nRows,datestr(endTime-beginEpsTolTime,'HH:MM:SS.FFF'),datestr(endTime,'HH:MM:SS.FFF'));
    fprintf(' Overall this model took %s time\n',datestr(endTime-beginTime,'HH:MM:SS.FFF'));
    %Finally, I print M
    %fprintf('We computed M:\n')
    %disp(M)
    %diary off

    [avg_err,max_err] = computeErrors(M, 100, 300,driftName);
    fprintf('Avg error: %d, Max error: %d\n',avg_err,max_err)
   
    addCaption=0;
    if ~isfile(csvFile)
        addCaption=1;
    end
    
    fprintf('\n')
    fid = fopen(csvFile, 'a');
    if(addCaption)
        fprintf('Caption added to CSV file %s\n',csvFile);
        fprintf(fid,'modelName,maxPerturbation,epsilon,tolerance,nRows,avg_err,max_err,iteration,msThisEpsilon,msTotal\n');
    end
    fprintf(fid,'%s,%d,%d,%d,%d,%d,%d,%d,%s,%s\n',modelName,maxPerturbation,epsilon,tolerance,nRows,avg_err,max_err,iter,milliseconds(endTime-beginEpsTolTime),milliseconds(endTime-beginTime));
    fclose(fid);
    fprintf('Line added to CSV file %s\n',csvFile);

end



function [avg_err,max_err] = computeErrors(M, samplings, compactumBound,driftName)

    n = size(M,2);
    avg_err = 0;
    max_err = 0;
    for i = 1 : samplings
        x = compactumBound .* rand(n,1);
        
        aux1 = feval(driftName,0,x);
        aux2 = feval(driftName,0,(M'*M*x));
        cur_err = norm(M*(aux1 - aux2));
        
        avg_err = avg_err + cur_err;
        max_err = max(max_err, cur_err);
    end
    
    avg_err = avg_err / samplings;
end



function [Jclean,k]=removeZeroJ(J,N)
    %I remove all zero matrices from J
    zerosparse = zeros(N,N);
    Jclean = cell(size(J,1),1);
    i2=1;
    for i=1:1:size(J,1)
        %J{i}
        if J{i} == zerosparse
            %do nothing
        else
            Jclean{i2} = J{i};
            i2=i2+1;
        end      
    end
    k=i2-1;
end