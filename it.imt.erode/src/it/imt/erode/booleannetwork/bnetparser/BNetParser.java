/* BNetParser.java */
/* Generated By:JavaCC: Do not edit this line. BNetParser.java */
package it.imt.erode.booleannetwork.bnetparser;

import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.LinkedHashMap;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.FileNotFoundException;

import it.imt.erode.booleannetwork.updatefunctions.IUpdateFunction;
import it.imt.erode.booleannetwork.updatefunctions.BooleanUpdateFunctionExpr;
import it.imt.erode.booleannetwork.updatefunctions.NotBooleanUpdateFunction;
import it.imt.erode.booleannetwork.updatefunctions.TrueUpdateFunction;
import it.imt.erode.booleannetwork.updatefunctions.FalseUpdateFunction;
import it.imt.erode.booleannetwork.updatefunctions.ReferenceToNodeUpdateFunction;
import it.imt.erode.crn.symbolic.constraints.BooleanConnector;

/*
# model in BoolNet format
# the header targets, factors is mandatory to be importable in the R package BoolNet

targets, factors
Ap,    1
Ap2,   0
Dl,    !Ap&N
Dl2,   !Ap2&N2
Fng,   Ap
Fng2,  Ap2
N,     !Fng&Ser2 | Fng&Dl2
N2,    !Dl&Ser&!Fng2 | Dl&!Ser&Fng2 | Dl&Ser
Ser,   Ap
Ser2,  Ap2
*/

@SuppressWarnings("unused")
/** A parser for BNetParser files. */
public class BNetParser implements BNetParserConstants {

  public final static String bnetExample="# model in BoolNet format\n"
                + "# the header targets, factors is mandatory to be importable in the R package BoolNet\n"
                + "\n"
                + "targets, factors\n"
                + "Ap,    1\n"
                + "Ap2,   0\n"
                + "Dl,    !Ap&N\n"
                + "Dl2,   !Ap2&N2\n"
                + "Fng,   Ap\n"
                + "Fng2,  Ap2\n"
                + "N,     !Fng&Ser2 | Fng&Dl2\n"
                + "N2,    !Dl&Ser&!Fng2 | Dl&!Ser&Fng2 | Dl&Ser\n"
                + "Ser,   Ap\n"
                + "Ser2,  Ap2";


  /** Main entry point for parsing a file from command line */
  public static void main(String args[])  throws ParseException {
    BNetParser parser = new BNetParser(System.in);
    parser.BNetFile();
  }

  /** Main entry point for programmatically parsing a string */
  public static LinkedHashMap<String,IUpdateFunction> parseString(String bnetStr)  throws ParseException {
          Reader r = new StringReader(bnetStr);
          BNetParser parser = new BNetParser(r);
          LinkedHashMap<String, IUpdateFunction> booleanUpdateFunctions=parser.BNetFile();
          return booleanUpdateFunctions;
  }

  /** Main entry point for programmatically parsing a file */
  public static LinkedHashMap<String,IUpdateFunction> parseFile(File file)  throws ParseException,FileNotFoundException {
          InputStream is = new FileInputStream(file);
          BNetParser parser = new BNetParser(is);
          LinkedHashMap<String, IUpdateFunction> booleanUpdateFunctions=parser.BNetFile();
          return booleanUpdateFunctions;
  }

  final public LinkedHashMap<String, IUpdateFunction> BNetFile() throws ParseException {//beggining code
        LinkedHashMap<String, IUpdateFunction> booleanUpdateFunctions= new LinkedHashMap<>();
        NameAndUpdateFunction nDef=null;
        //ArrayList<String> nodeNames=new ArrayList<String>();

    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TARGETS:{
        jj_consume_token(TARGETS);
        jj_consume_token(COMMA);
        jj_consume_token(FACTORS);
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ID:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        nDef = nodeDef();
//opNames.add(opDef.getName());
                        booleanUpdateFunctions.put(nDef.getName(), nDef.getUpdateFunction() );
      }
//return MultiQuaTExQueryCreator.create(opNames,nameToOpDef,evalPart);
        {if ("" != null) return booleanUpdateFunctions;}
    } catch (ParseException e) {
//recoverFromError( e );
    //System.out.println(e.getMessage());
        {if (true) throw(e);}
    }
    throw new Error("Missing return statement in function");
}

  final public NameAndUpdateFunction nodeDef() throws ParseException {String name = null;
    Token nameToken =null;
    IUpdateFunction updateFunction=null;
    //ArrayList<Variable> variables = new ArrayList<>();
        //Variable variable = null;
    //ITempOrStateExpression sExp=null;

    try {
      nameToken = jj_consume_token(ID);
name = nameToken.image;
      jj_consume_token(COMMA);
      updateFunction = boolExpr();
    } catch (ParseException e) {
//recoverFromError( e );
        //System.out.println(e.getMessage());
                {if (true) throw(e);}
    }
{if ("" != null) return new NameAndUpdateFunction( name, updateFunction );}
    throw new Error("Missing return statement in function");
}

/**
 * Parse an boolean expression on state expressions
 * <pre>
 *   boolExpr ::= True | False | ! boolE | boolE OP boolE | refToNode
 * </pre>
 *
 * @return an AST for a TemporalOperatorDefinition.
 */
  final public IUpdateFunction boolExpr() throws ParseException {//IUpdateFunction left=null;
IUpdateFunction right=null;
//ArrayList<IUpdateFunction> all_or=new ArrayList<>();
IUpdateFunction cumul_or = null;
    //left = andBoolExpr()
     cumul_or = andBoolExpr();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(OR);
      right = andBoolExpr();
//all_or.add(right);
        //if(cumul_or == null)
        //	cumul_or = right;
        //else
        //	cumul_or = new BooleanUpdateFunctionExpr(cumul_or,right,BooleanConnector.OR);
        cumul_or = new BooleanUpdateFunctionExpr(cumul_or,right,BooleanConnector.OR);
    }
//if(right==null) return left;
        //else return new BooleanUpdateFunctionExpr(left,right,BooleanConnector.OR);
        //if(all_or.size()==1) return all_or.get(0);
        //else {return new BooleanUpdateFunctionExpr(all_or.get(0),all_or.get(0),BooleanConnector.OR);}
        //if(cumul_or==null) return left;
        //else return new BooleanUpdateFunctionExpr(left,cumul_or,BooleanConnector.OR);
        {if ("" != null) return cumul_or;}
    throw new Error("Missing return statement in function");
}

  final public IUpdateFunction andBoolExpr() throws ParseException {//IUpdateFunction left=null;
IUpdateFunction right=null;
IUpdateFunction cumul_and = null;
    //left = simpleBoolExpr()
     cumul_and = simpleBoolExpr();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(AND);
      right = simpleBoolExpr();
cumul_and = new BooleanUpdateFunctionExpr(cumul_and,right,BooleanConnector.AND);
    }
//if(right==null) return left;
        //else return new BooleanUpdateFunctionExpr(left,right,BooleanConnector.AND);
        {if ("" != null) return cumul_and;}
    throw new Error("Missing return statement in function");
}

  final public IUpdateFunction simpleBoolExpr() throws ParseException {IUpdateFunction left=null;
         Token nameToken =null;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:{
        jj_consume_token(TRUE);
{if ("" != null) return new TrueUpdateFunction();}
        break;
        }
      case FALSE:{
        jj_consume_token(FALSE);
{if ("" != null) return new FalseUpdateFunction();}
        break;
        }
      case ID:{
        nameToken = jj_consume_token(ID);
{if ("" != null) return new ReferenceToNodeUpdateFunction(nameToken.image);}
        break;
        }
      case LNOT:{
        jj_consume_token(LNOT);
        left = simpleBoolExpr();
{if ("" != null) return new NotBooleanUpdateFunction(left);}
        break;
        }
      case LPAREN:{
        jj_consume_token(LPAREN);
        left = boolExpr();
        jj_consume_token(RPAREN);
{if ("" != null) return left;}
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
//recoverFromError( e );
        //System.out.println(e.getMessage());
                {if (true) throw(e);}
    }
    throw new Error("Missing return statement in function");
}

  /** Generated Token Manager. */
  public BNetParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x80,0x20000,0x2000,0x1000,0x24e00,};
	}

  /** Constructor with InputStream. */
  public BNetParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public BNetParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new BNetParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public BNetParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new BNetParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new BNetParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public BNetParser(BNetParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(BNetParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[20];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 5; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 20; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
