/*
 * generated by Xtext 2.20.0
 */
package it.imt.erode.crn.ui.contentassist;

import it.imt.erode.crn.MyParserUtil;
//import it.imt.erode.crn.ui.contentassist.AbstractChemicalReactionNetworkProposalProvider;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.swt.widgets.DirectoryDialog;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.FileDialog;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.ui.editor.contentassist.ConfigurableCompletionProposal;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.eclipse.xtext.ui.editor.contentassist.ReplacementTextApplier;


/**
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#content-assist
 * on how to customize the content assistant.
 */
public class ChemicalReactionNetworkProposalProvider extends AbstractChemicalReactionNetworkProposalProvider {
	  /**
	   * override completeReduceNBB_OptionalParametersFormatted(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor){
	   * // call implementation of superclass
	   * super.completeReduceNBB_OptionalParametersFormatted(model, assignment, context, acceptor)
	   * // compute a new dummy proposal
	   * var proposal = "dummyProposal";
	   * // Create and register the completion proposal:
	   * // The proposal may be null as the createCompletionProposal(..)
	   * // methods check for valid prefixes and terminal token conflicts.
	   * // The acceptor handles null-values gracefully.
	   * acceptor.accept(createCompletionProposal(proposal, context));
	   * }
	   */
	  @Override
	  public void completeVisualizePlot_Plot(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
	    super.completeVisualizePlot_Plot(model, assignment, context, acceptor);
	    acceptor.accept(this.createCompletionProposal("NO", "Do not plot", null, context));
	    return;
	  }
	  
	  @Override
	  public void completePrep_Prep(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
	    acceptor.accept(this.createCompletionProposal("NO", "Do not prepartition", null, context));
	    acceptor.accept(this.createCompletionProposal("USER", "Set user defined initial partition", null, context));
	    acceptor.accept(this.createCompletionProposal("IC", "According to the initial concentrations", null, context));
	    acceptor.accept(this.createCompletionProposal("USER_and_IC", "Set user defined initial partition, further refined by the initial conditions", null, context));
	    acceptor.accept(this.createCompletionProposal("Outputs", "One block with all 'outputs' (variables that do not affect other ones). Only for MA", null, context));
	    acceptor.accept(this.createCompletionProposal("Outputs_singleton", "One block per 'output' (variables that do not affect other ones). Only for MA", null, context));
	    return;
	  }
	  
	  @Override
	  public void complete_UpToOptions(EObject model, RuleCall ruleCall, ContentAssistContext context,
			  ICompletionProposalAcceptor acceptor) {
		  //super.complete_UpToOptions(model, ruleCall, context, acceptor);
		  acceptor.accept(this.createCompletionProposal("NO", "Do not use up to techniques", null, context));
		  acceptor.accept(this.createCompletionProposal("Reflexivity", "Reflexivity: From (x1,x2) we know (x1,x1),(x2,x2)", null, context));
		  acceptor.accept(this.createCompletionProposal("Symmetry", "Symmetry: From (x1,x2) we know (x2,x1)", null, context));
		  acceptor.accept(this.createCompletionProposal("ReflexivitySymmetry", "Reflexivity+Symmetry: From (x1,x2) we know (x1,x1),(x2,x2),(x2,x1)", null, context));
		  acceptor.accept(this.createCompletionProposal("Transitivity", "Transitivity: From (x1,x2) and (x2,x3) we know (x1,x3)", null, context));
		  acceptor.accept(this.createCompletionProposal("Equivalence", "Equivalence: Reflexivity+Symmetry+Transitivity", null, context));
	  }
	  
	  @Override
	  public void completeWrite_Format(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
	    acceptor.accept(this.createCompletionProposal("ODE", "ODE system", null, context));
	    acceptor.accept(this.createCompletionProposal("RN", "(possibly) arbitrary reaction network", null, context));
	    acceptor.accept(this.createCompletionProposal("MA-RN", "mass action reaction network", null, context));
	    super.completeWrite_Format(model, assignment, context, acceptor);
	  }
	  
	  public ConfigurableCompletionProposal pickAFilePrivate(final ContentAssistContext context, final String text) {
	    return this.pickAFilePrivate(context, text, null);
	  }
	  
	  public ConfigurableCompletionProposal pickAFilePrivate(final ContentAssistContext context, final String text, final String[] filterExtensions) {
	    ICompletionProposal _createCompletionProposal = this.createCompletionProposal(text, context);
	    ConfigurableCompletionProposal pickFile = ((ConfigurableCompletionProposal) _createCompletionProposal);
	    if ((pickFile != null)) {
	      pickFile.setTextApplier(new ReplacementTextApplier() {
	        @Override
	        public String getActualReplacementString(final ConfigurableCompletionProposal proposal) {
	          Display display = context.getViewer().getTextWidget().getDisplay();
	          Shell _activeShell = display.getActiveShell();
	          FileDialog dialog = new FileDialog(_activeShell);
	          if (((filterExtensions != null) && (filterExtensions.length > 0))) {
	            dialog.setFilterExtensions(filterExtensions);
	          }
	          dialog.setOverwrite(true);
	          String absFileName = dialog.open();
	          if ((absFileName != null)) {
	            boolean _isWindows = MyParserUtil.isWindows();
	            if (_isWindows) {
	              absFileName = absFileName.replace("\\", "\\\\");
	            }
	            return (("\"" + absFileName) + "\"");
	          } else {
	            return "";
	          }
	        }
	      });
	    }
	    return pickFile;
	  }
	  
	  public ConfigurableCompletionProposal pickADirectoryPrivate(final ContentAssistContext context, final String text) {
	    ICompletionProposal _createCompletionProposal = this.createCompletionProposal(text, context);
	    ConfigurableCompletionProposal pickFile = ((ConfigurableCompletionProposal) _createCompletionProposal);
	    if ((pickFile != null)) {
	      pickFile.setTextApplier(new ReplacementTextApplier() {
	        @Override
	        public String getActualReplacementString(final ConfigurableCompletionProposal proposal) {
	          Display display = context.getViewer().getTextWidget().getDisplay();
	          Shell _activeShell = display.getActiveShell();
	          DirectoryDialog dialog = new DirectoryDialog(_activeShell);
	          String absFileName = dialog.open();
	          if ((absFileName != null)) {
	            boolean _isWindows = MyParserUtil.isWindows();
	            if (_isWindows) {
	              absFileName = absFileName.replace("\\", "\\\\");
	            }
	            return (("\"" + absFileName) + "\"");
	          } else {
	            return null;
	          }
	        }
	      });
	    }
	    return pickFile;
	  }
	  
	  /**
	   * override completeParamsApprox_MatalbScript(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor){
	   * super.completeParams
	   * acceptor.accept(pickAFilePrivate(context,"Pick a file..."));
	   * }
	   */
	  @Override
	  public void completeExportPontryaginPolygonMethod_CoraLibrary(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
	    super.completeExportPontryaginPolygonMethod_CoraLibrary(model, assignment, context, acceptor);
	    acceptor.accept(this.pickADirectoryPrivate(context, "Pick a directory..."));
	  }
	  
	  @Override
	  public void completeExportCAGEScript_UnionModel(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
	    super.completeExportCAGEScript_UnionModel(model, assignment, context, acceptor);
	    acceptor.accept(this.pickAFilePrivate(context, "Pick a file..."));
	  }
	  
	  @Override
	  public void completeParamsApprox_MatalbScript(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
	    super.completeParamsApprox_MatalbScript(model, assignment, context, acceptor);
	    acceptor.accept(this.pickAFilePrivate(context, "Pick a file..."));
	    acceptor.accept(this.pickADirectoryPrivate(context, "Pick a directory..."));
	  }
	  
	  @Override
	  public void completeFileRed_FileOut(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
	    super.completeFileRed_FileOut(model, assignment, context, acceptor);
	    acceptor.accept(this.pickAFilePrivate(context, "Pick a file..."));
	    acceptor.accept(this.pickADirectoryPrivate(context, "Pick a directory..."));
	  }
	  
	  @Override
	  public void completeParametersExport_FileOut(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
	    super.completeParametersExport_FileOut(model, assignment, context, acceptor);
	    acceptor.accept(this.pickAFilePrivate(context, "Pick a file..."));
	    acceptor.accept(this.pickADirectoryPrivate(context, "Pick a directory..."));
	  }
	  
	  @Override
	  public void completeParametersImport_FileIn(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
	    super.completeParametersImport_FileIn(model, assignment, context, acceptor);
	    acceptor.accept(this.pickAFilePrivate(context, "Pick a file..."));
	    acceptor.accept(this.pickADirectoryPrivate(context, "Pick a directory..."));
	  }
	  
	  /**
	   * override complete_FileIn(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor){
	   * super.complete_FileIn(model,  ruleCall,  context, acceptor)
	   * }
	   */
	  @Override
	  public void completeCSVFile_Csv(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
	    super.completeCSVFile_Csv(model, assignment, context, acceptor);
	    acceptor.accept(this.pickAFilePrivate(context, "Pick a file..."));
	    acceptor.accept(this.pickADirectoryPrivate(context, "Pick a directory..."));
	  }
	  
	  @Override
	  public void completeImportMRMC_LabellingFile(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
	    super.completeImportMRMC_LabellingFile(model, assignment, context, acceptor);
	    acceptor.accept(this.pickAFilePrivate(context, "Pick a file..."));
	    acceptor.accept(this.pickADirectoryPrivate(context, "Pick a directory..."));
	    acceptor.accept(this.createCompletionProposal("same", context));
	  }
	  
	  @Override
	  public void completeImportChemKin_ThermoDynamicFile(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
	    super.completeImportChemKin_ThermoDynamicFile(model, assignment, context, acceptor);
	    acceptor.accept(this.pickAFilePrivate(context, "Pick a file..."));
	    acceptor.accept(this.pickADirectoryPrivate(context, "Pick a directory..."));
	  }
	  
	  @Override
	  public void completeMethod_Method(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
	    super.completeMethod_Method(model, assignment, context, acceptor);
	    acceptor.accept(this.createCompletionProposal("ssa", "Direct method by Gillepsie", null, context));
	    acceptor.accept(this.createCompletionProposal("ssa+", "Direct method of Gillepsie enhanced using dependency graphs", null, context));
	    acceptor.accept(this.createCompletionProposal("nextReaction", "Next-reaction method by Gibson and Bruck", null, context));
	    acceptor.accept(this.createCompletionProposal("tauLeapingAbs", "Tau-leaping algorithm (Error bounded by the sum of all propensity functions)", null, context));
	    acceptor.accept(this.createCompletionProposal("tauLeapingRelProp", "Tau-leaping algorithm (Error bounded by the relative change in the individual propensity functions)", null, context));
	    acceptor.accept(this.createCompletionProposal("tauLeapingRelPop", "Tau-leaping algorithm (Error bounded by the relative changes in the molecular populations)", null, context));
	    acceptor.accept(this.createCompletionProposal("maximalTimeStep", "Maximal time step method by Puchalka.", null, context));
	  }
	  
	  @Override
	  public void complete_NONNEGATIVEREAL(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
	    super.complete_NONNEGATIVEREAL(model, ruleCall, context, acceptor);
	    acceptor.accept(this.createCompletionProposal("1.0", context));
	  }
	  
	  @Override
	  public void complete_NAT(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
	    super.complete_NAT(model, ruleCall, context, acceptor);
	    acceptor.accept(this.createCompletionProposal("1", context));
	  }
	  
	  @Override
	  public void complete_POSITIVEINTORREAL(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
	    this.complete_NONNEGATIVEREAL(model, ruleCall, context, acceptor);
	  }
	  
	  @Override
	  public void complete_NONNEGATIVEINTORREAL(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
	    this.complete_NONNEGATIVEREAL(model, ruleCall, context, acceptor);
	  }
	  
	  /**
	   * override complete_NEGATIVEINTORREAL(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
	   * complete_NONNEGATIVEREAL(model, ruleCall, context, acceptor)
	   * }
	   */
	  @Override
	  public void complete_ZERO(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
	    super.complete_ZERO(model, ruleCall, context, acceptor);
	    acceptor.accept(this.createCompletionProposal("0", context));
	  }
	  
	  @Override
	  public void complete_BooleanValue(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
	    super.complete_BooleanValue(model, ruleCall, context, acceptor);
	    acceptor.accept(this.createCompletionProposal("true", context));
	    acceptor.accept(this.createCompletionProposal("false", context));
	  }
	  
	  @Override
	  public void complete_MatrixForm(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
	    super.complete_MatrixForm(model, ruleCall, context, acceptor);
	    acceptor.accept(this.createCompletionProposal("AX", context));
	    acceptor.accept(this.createCompletionProposal("PQ", context));
	    acceptor.accept(this.createCompletionProposal("FEM", context));
	  }
	  
	  @Override
	  public void completeExportEpsilonBoundsScript_Red(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
	    super.completeExportEpsilonBoundsScript_Red(model, assignment, context, acceptor);
	    acceptor.accept(this.createCompletionProposal("NO", context));
	  }
	  
	  @Override
	  public void completeSpeciesCompExpression_Comp(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
	    super.completeBasicConstraint_Comp(model, assignment, context, acceptor);
	    acceptor.accept(this.createCompletionProposal(">", context));
	    acceptor.accept(this.createCompletionProposal("<", context));
	    acceptor.accept(this.createCompletionProposal("<=", context));
	    acceptor.accept(this.createCompletionProposal(">=", context));
	    acceptor.accept(this.createCompletionProposal("=", context));
	  }
	  
	  @Override
	  public void completeBasicConstraint_Comp(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
	    super.completeBasicConstraint_Comp(model, assignment, context, acceptor);
	    acceptor.accept(this.createCompletionProposal(">", context));
	    acceptor.accept(this.createCompletionProposal("<", context));
	    acceptor.accept(this.createCompletionProposal("<=", context));
	    acceptor.accept(this.createCompletionProposal(">=", context));
	    acceptor.accept(this.createCompletionProposal("=", context));
	    acceptor.accept(this.createCompletionProposal("!=", context));
	  }
	  
	  /**
	   * override completeView_Expr(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
	   * //completeRuleCall(((RuleCall)assignment.getTerminal()), context, acceptor);
	   * //acceptor.accept(createCompletionProposal('completeView_Expr', context))
	   * return
	   * }
	   * override complete_VarExpr(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
	   * //acceptor.accept(createCompletionProposal('complete_VarExpr', context))
	   * return
	   * }
	   * override complete_CovExpr(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
	   * //acceptor.accept(createCompletionProposal('complete_CovExpr', context))
	   * return
	   * }
	   * override completeAdditionWithSpeciesAndCov_Right(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
	   * //completeRuleCall(((RuleCall)assignment.getTerminal()), context, acceptor);
	   * //acceptor.accept(createCompletionProposal('completeAdditionWithSpeciesAndCov_Right', context))
	   * return
	   * }
	   * override complete_ArithmeticExpressionWithSpeciesAndCov(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
	   * //acceptor.accept(createCompletionProposal('complete_ArithmeticExpressionWithSpeciesAndCov', context))
	   * return
	   * }
	   * override complete_AdditionWithSpeciesAndCov(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
	   * //acceptor.accept(createCompletionProposal('complete_AdditionWithSpeciesAndCov', context))
	   * return
	   * }
	   * override complete_ReferenceToSpeciesOrVariances(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
	   * return
	   * //super.complete_ReferenceToSpecies(model, ruleCall, context, acceptor)
	   * //acceptor.accept(createCompletionProposal('complete_ReferenceToSpeciesOrVariances', context))
	   * }
	   */
	  @Override
	  protected String getDisplayString(final EObject element, final String qualifiedNameAsString, final String shortName) {
	    String myQualifiedNameAsString = qualifiedNameAsString;
	    if ((myQualifiedNameAsString == null)) {
	      myQualifiedNameAsString = shortName;
	    }
	    if ((myQualifiedNameAsString == null)) {
	      if ((element != null)) {
	        myQualifiedNameAsString = this.getLabelProvider().getText(element);
	      } else {
	        return null;
	      }
	    }
	    QualifiedName qualifiedName = this.getQualifiedNameConverter().toQualifiedName(myQualifiedNameAsString);
	    int _segmentCount = qualifiedName.getSegmentCount();
	    boolean _equals = (_segmentCount == 2);
	    if (_equals) {
	      String _lastSegment = qualifiedName.getLastSegment();
	      String _plus = (_lastSegment + " - ");
	      return (_plus + qualifiedNameAsString);
	    } else {
	      int _segmentCount_1 = qualifiedName.getSegmentCount();
	      boolean _greaterThan = (_segmentCount_1 > 2);
	      if (_greaterThan) {
	        StringBuilder name = new StringBuilder();
	        boolean first = true;
	        boolean second = false;
	        List<String> _segments = qualifiedName.getSegments();
	        for (final String seg : _segments) {
	          if (first) {
	            first = false;
	            second = true;
	          } else {
	            if (second) {
	              second = false;
	              name.append(seg);
	            } else {
	              name.append(".");
	              name.append(seg);
	            }
	          }
	        }
	        String _plus_1 = (name + " - ");
	        return (_plus_1 + myQualifiedNameAsString);
	      }
	    }
	    return qualifiedNameAsString;
	  }
	  
	  /**
	   * override complete_SpeciesWithMultiplicity(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
	   * System.out.println("ciao")
	   * //return;
	   * super.complete_SpeciesWithMultiplicity(model, ruleCall, context, acceptor)
	   * }
	   */
	  @Override
	  public void completeKeyword(final Keyword keyword, final ContentAssistContext contentAssistContext, final ICompletionProposalAcceptor acceptor) {
	    if (keyword.getValue().equals("reduceFB") || keyword.getValue().equals("reduceBB") || 
	      keyword.getValue().equals("fullSpeciesNames") || 
	      keyword.getValue().equals("reduceDSB") || keyword.getValue().equals("reduceEFL") || 
	      keyword.getValue().equals("utopicOLD") || 
	      keyword.getValue().equals("computeDifferentialHull") || keyword.getValue().equals("exportCRN") || 
	      keyword.getValue().equals("smtTimeCSVFile") || keyword.getValue().equals("addSelfLoops") || keyword.getValue().equals("oneLabelAtAtTime") || 
	      //keyword.getValue().equals("fileWhereToStorePartition") || 
	      keyword.getValue().equals("IC") || keyword.getValue().equals("USER") || keyword.getValue().equals("NO") ||  keyword.getValue().equals("USER_and_IC") || keyword.getValue().equals("Outputs") || keyword.getValue().equals("Outputs_singleton") ||
	      keyword.getValue().equals("reductionAlgorithm") || keyword.getValue().equals("exportFlyFast") || 
	      keyword.getValue().equals("importChemKin") || keyword.getValue().equals("importLinearSystemAsCCSVMatrix") || 
	      keyword.getValue().equals("reduceEpsNBB") || keyword.getValue().equals("reduceEpsNFB") || 
	      keyword.getValue().equals("exportJacobianFunction") || keyword.getValue().equals("exportEpsilonBoundsScript") || 
	      keyword.getValue().equals("halveRatesOfHomeoReactions")) {
	      return;
	    } else {
	      super.completeKeyword(keyword, contentAssistContext, acceptor);
	    }
	  }
}
