/*
 * generated by Xtext 2.20.0
 */
package it.imt.erode.crn.ui.labeling;

import com.google.inject.Inject;
import it.imt.erode.crn.MyParserUtil;
import it.imt.erode.crn.chemicalReactionNetwork.ALG;
import it.imt.erode.crn.chemicalReactionNetwork.AlgICList;
import it.imt.erode.crn.chemicalReactionNetwork.AlgebraicList;
import it.imt.erode.crn.chemicalReactionNetwork.AndBoolConstraintExpr;
import it.imt.erode.crn.chemicalReactionNetwork.ArbitraryRate;
import it.imt.erode.crn.chemicalReactionNetwork.BasicConstraint;
import it.imt.erode.crn.chemicalReactionNetwork.Block;
import it.imt.erode.crn.chemicalReactionNetwork.BoolExpr;
import it.imt.erode.crn.chemicalReactionNetwork.Command;
import it.imt.erode.crn.chemicalReactionNetwork.Composite;
import it.imt.erode.crn.chemicalReactionNetwork.ConstraintsOnSymbolicParametersList;
import it.imt.erode.crn.chemicalReactionNetwork.Expression;
import it.imt.erode.crn.chemicalReactionNetwork.FormattedOptionalParametersReductions;
import it.imt.erode.crn.chemicalReactionNetwork.HillRate;
import it.imt.erode.crn.chemicalReactionNetwork.ICList;
import it.imt.erode.crn.chemicalReactionNetwork.ImpliesBoolConstraintExpr;
import it.imt.erode.crn.chemicalReactionNetwork.Import;
import it.imt.erode.crn.chemicalReactionNetwork.ImportFolder;
import it.imt.erode.crn.chemicalReactionNetwork.InitPartition;
import it.imt.erode.crn.chemicalReactionNetwork.ListOfCoefficients;
import it.imt.erode.crn.chemicalReactionNetwork.ListOfParamsToPerturb;
import it.imt.erode.crn.chemicalReactionNetwork.MassActionRate;
import it.imt.erode.crn.chemicalReactionNetwork.NotConstraintExpr;
import it.imt.erode.crn.chemicalReactionNetwork.ODE;
import it.imt.erode.crn.chemicalReactionNetwork.ODEsList;
import it.imt.erode.crn.chemicalReactionNetwork.OrBoolConstraintExpr;
import it.imt.erode.crn.chemicalReactionNetwork.ParameterWithBound;
import it.imt.erode.crn.chemicalReactionNetwork.ParametersList;
import it.imt.erode.crn.chemicalReactionNetwork.RateOfReaction;
import it.imt.erode.crn.chemicalReactionNetwork.Reaction;
import it.imt.erode.crn.chemicalReactionNetwork.ReactionsList;
import it.imt.erode.crn.chemicalReactionNetwork.Reduction;
import it.imt.erode.crn.chemicalReactionNetwork.Species;
import it.imt.erode.crn.chemicalReactionNetwork.SpeciesAndExpression;
import it.imt.erode.crn.chemicalReactionNetwork.SpeciesOrNode;
import it.imt.erode.crn.chemicalReactionNetwork.SpeciesWithMultiplicity;
import it.imt.erode.crn.chemicalReactionNetwork.SymbolicParametersList;
import it.imt.erode.crn.chemicalReactionNetwork.UpdateStatusCommand;
import it.imt.erode.crn.chemicalReactionNetwork.ViewsList;
import it.imt.erode.crn.chemicalReactionNetwork.curry;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;
import org.eclipse.xtext.xbase.lib.Conversions;


/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#label-provider
 */
public class ChemicalReactionNetworkLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	public ChemicalReactionNetworkLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	// Labels and icons can be computed like this:
	
//	String text(Greeting ele) {
//		return "A greeting to " + ele.getName();
//	}
//
//	String image(Greeting ele) {
//		return "Greeting.gif";
//	}
	
	  public String text(final ListOfCoefficients l) {
		    String _xblockexpression = null;
		    {
		      int s = l.getCoefficients().size();
		      String _xifexpression = null;
		      if ((s == 1)) {
		        _xifexpression = (Integer.valueOf(s) + " coefficient");
		      } else {
		        _xifexpression = (Integer.valueOf(s) + " coefficients");
		      }
		      _xblockexpression = _xifexpression;
		    }
		    return _xblockexpression;
		  }
		  
		  public String text(final ListOfParamsToPerturb l) {
		    String _xblockexpression = null;
		    {
		      int s = l.getParamsToPerturb().size();
		      String _xifexpression = null;
		      if ((s == 1)) {
		        _xifexpression = (Integer.valueOf(s) + " uncertain parameter");
		      } else {
		        _xifexpression = (Integer.valueOf(s) + " uncertain parameters");
		      }
		      _xblockexpression = _xifexpression;
		    }
		    return _xblockexpression;
		  }
		  
		  public String text(final ParameterWithBound p) {
		    String _name = p.getParam().getName();
		    String _plus = (_name + " in [ ");
		    String _text = this.text(p.getLow());
		    String _plus_1 = (_plus + _text);
		    String _plus_2 = (_plus_1 + " , ");
		    String _text_1 = this.text(p.getHigh());
		    String _plus_3 = (_plus_2 + _text_1);
		    return (_plus_3 + " ]");
		  }
		  
		  public String text(final SpeciesAndExpression se) {
		    String _name = se.getSpecies().getName();
		    String _plus = (_name + " : ");
		    String _text = this.text(se.getCoeff());
		    return (_plus + _text);
		  }
		  
		  public String text(final Species species) {
		    String _xifexpression = null;
		    Expression _ic = species.getIc();
		    boolean _tripleEquals = (_ic == null);
		    if (_tripleEquals) {
		      String _name = species.getName();
		      _xifexpression = (_name + ", IC = 0");
		    } else {
		      String _name_1 = species.getName();
		      String _plus = (_name_1 + ", IC = ");
		      String _visitExpr = MyParserUtil.visitExpr(species.getIc());
		      _xifexpression = (_plus + _visitExpr);
		    }
		    return _xifexpression;
		  }
		  
		  public String text(final AlgICList algebraicSpeciesList) {
		    String _xifexpression = null;
		    int _size = algebraicSpeciesList.getAllAlgSpecies().size();
		    boolean _equals = (_size == 1);
		    if (_equals) {
		      _xifexpression = "1 Algebraic species";
		    } else {
		      int _size_1 = algebraicSpeciesList.getAllAlgSpecies().size();
		      _xifexpression = (Integer.valueOf(_size_1) + " Algebraic species");
		    }
		    return _xifexpression;
		  }
		  
		  public String text(final ICList speciesList) {
		    String _xifexpression = null;
		    int _size = speciesList.getAllSpecies().size();
		    boolean _equals = (_size == 1);
		    if (_equals) {
		      _xifexpression = "1 species";
		    } else {
		      int _size_1 = speciesList.getAllSpecies().size();
		      _xifexpression = (Integer.valueOf(_size_1) + " species");
		    }
		    return _xifexpression;
		  }
		  
		  public String text(final InitPartition initPartition) {
		    String _xifexpression = null;
		    int _size = initPartition.getAllBlocks().size();
		    boolean _equals = (_size == 1);
		    if (_equals) {
		      _xifexpression = "1 block";
		    } else {
		      int _size_1 = initPartition.getAllBlocks().size();
		      _xifexpression = (Integer.valueOf(_size_1) + " blocks");
		    }
		    return _xifexpression;
		  }
		  
		  public String text(final Block block) {
		    String _xifexpression = null;
		    int _size = block.getAllSpecies().size();
		    boolean _equals = (_size == 0);
		    if (_equals) {
		      _xifexpression = "empty";
		    } else {
		      StringBuilder blockString = new StringBuilder();
		      EList<SpeciesOrNode> _allSpecies = block.getAllSpecies();
		      for (final SpeciesOrNode species : _allSpecies) {
		        {
		          blockString.append(" ");
		          String _name = species.getName();
		          boolean _tripleEquals = (_name == null);
		          if (_tripleEquals) {
		            blockString.append(MyParserUtil.UNDEFSPECIESNAME);
		          } else {
		            blockString.append(species.getName());
		          }
		        }
		      }
		      return blockString.toString();
		    }
		    return _xifexpression;
		  }
		  
		  /**
		   * def text(InitialConcentration ic) {
		   * ic.name.name + ' = ' + text(ic.ic)
		   * }
		   */
		  public String text(final ReactionsList reactionsList) {
		    String _xifexpression = null;
		    int _size = reactionsList.getAllReactions().size();
		    boolean _equals = (_size == 1);
		    if (_equals) {
		      _xifexpression = "1 reaction";
		    } else {
		      int _size_1 = reactionsList.getAllReactions().size();
		      _xifexpression = (Integer.valueOf(_size_1) + " reactions");
		    }
		    return _xifexpression;
		  }
		  
		  public String text(final ODEsList odesList) {
		    String _xifexpression = null;
		    int _size = odesList.getOdes().size();
		    boolean _equals = (_size == 1);
		    if (_equals) {
		      _xifexpression = "1 ODE";
		    } else {
		      int _size_1 = odesList.getOdes().size();
		      _xifexpression = (Integer.valueOf(_size_1) + " ODEs");
		    }
		    return _xifexpression;
		  }
		  
		  public String text(final AlgebraicList algList) {
		    String _xifexpression = null;
		    int _size = algList.getAlgs().size();
		    boolean _equals = (_size == 1);
		    if (_equals) {
		      _xifexpression = "1 Algebraic constraint";
		    } else {
		      int _size_1 = algList.getAlgs().size();
		      _xifexpression = (Integer.valueOf(_size_1) + " Algebraic constraints");
		    }
		    return _xifexpression;
		  }
		  
		  public String text(final ParametersList parametersList) {
		    String _xifexpression = null;
		    int _size = parametersList.getParameters().size();
		    boolean _equals = (_size == 1);
		    if (_equals) {
		      _xifexpression = "1 parameter";
		    } else {
		      int _size_1 = parametersList.getParameters().size();
		      _xifexpression = (Integer.valueOf(_size_1) + " parameters");
		    }
		    return _xifexpression;
		  }
		  
		  public String text(final SymbolicParametersList symbolicParametersList) {
		    String _xifexpression = null;
		    int _size = symbolicParametersList.getSymbolicParameters().size();
		    boolean _equals = (_size == 1);
		    if (_equals) {
		      _xifexpression = "1 parameter";
		    } else {
		      int _size_1 = symbolicParametersList.getSymbolicParameters().size();
		      _xifexpression = (Integer.valueOf(_size_1) + " symbolic parameters");
		    }
		    return _xifexpression;
		  }
		  
		  public String text(final ConstraintsOnSymbolicParametersList constraintList) {
		    String _xifexpression = null;
		    int _size = constraintList.getConstraints().size();
		    boolean _equals = (_size == 1);
		    if (_equals) {
		      _xifexpression = "1 constraint";
		    } else {
		      int _size_1 = constraintList.getConstraints().size();
		      _xifexpression = (Integer.valueOf(_size_1) + " constraints");
		    }
		    return _xifexpression;
		  }
		  
		  /**
		   * def text(SymbolicParameter sb) {
		   * sb.name
		   * }
		   */
		  public String text(final BoolExpr constraint) {
		    String _xifexpression = null;
		    if ((constraint instanceof BasicConstraint)) {
		      String _name = ((BasicConstraint)constraint).getSymbolicParameter().getName();
		      String _plus = ("" + _name);
		      String _plus_1 = (_plus + " ");
		      String _comp = ((BasicConstraint)constraint).getComp();
		      String _plus_2 = (_plus_1 + _comp);
		      String _plus_3 = (_plus_2 + " ");
		      String _visitExpr = MyParserUtil.visitExpr(((BasicConstraint)constraint).getConstraint());
		      _xifexpression = (_plus_3 + _visitExpr);
		    } else {
		      String _xifexpression_1 = null;
		      if ((constraint instanceof NotConstraintExpr)) {
		        String _text = this.text(((NotConstraintExpr)constraint).getLeft());
		        String _plus_4 = ("not(" + _text);
		        _xifexpression_1 = (_plus_4 + ")");
		      } else {
		        String _xifexpression_2 = null;
		        if ((constraint instanceof AndBoolConstraintExpr)) {
		          String _text_1 = this.text(((AndBoolConstraintExpr)constraint).getLeft());
		          String _plus_5 = ("(" + _text_1);
		          String _plus_6 = (_plus_5 + ") /\\ (");
		          String _text_2 = this.text(((AndBoolConstraintExpr)constraint).getRight());
		          String _plus_7 = (_plus_6 + _text_2);
		          _xifexpression_2 = (_plus_7 + ")");
		        } else {
		          String _xifexpression_3 = null;
		          if ((constraint instanceof OrBoolConstraintExpr)) {
		            String _text_3 = this.text(((OrBoolConstraintExpr)constraint).getLeft());
		            String _plus_8 = ("(" + _text_3);
		            String _plus_9 = (_plus_8 + ") \\/ (");
		            String _text_4 = this.text(((OrBoolConstraintExpr)constraint).getRight());
		            String _plus_10 = (_plus_9 + _text_4);
		            _xifexpression_3 = (_plus_10 + ")");
		          } else {
		            String _xifexpression_4 = null;
		            if ((constraint instanceof ImpliesBoolConstraintExpr)) {
		              String _text_5 = this.text(((ImpliesBoolConstraintExpr)constraint).getLeft());
		              String _plus_11 = ("(" + _text_5);
		              String _plus_12 = (_plus_11 + ") -> (");
		              String _text_6 = this.text(((ImpliesBoolConstraintExpr)constraint).getRight());
		              String _plus_13 = (_plus_12 + _text_6);
		              _xifexpression_4 = (_plus_13 + ")");
		            } else {
		              _xifexpression_4 = "A composed constraint";
		            }
		            _xifexpression_3 = _xifexpression_4;
		          }
		          _xifexpression_2 = _xifexpression_3;
		        }
		        _xifexpression_1 = _xifexpression_2;
		      }
		      _xifexpression = _xifexpression_1;
		    }
		    return _xifexpression;
		  }
		  
		  public String text(final ViewsList viewsList) {
		    String _xifexpression = null;
		    int _size = viewsList.getAllViews().size();
		    boolean _equals = (_size == 1);
		    if (_equals) {
		      _xifexpression = "1 view";
		    } else {
		      int _size_1 = viewsList.getAllViews().size();
		      _xifexpression = (Integer.valueOf(_size_1) + " views");
		    }
		    return _xifexpression;
		  }
		  
		  public String text(final Reaction reaction) {
		    String _xblockexpression = null;
		    {
		      String r = "(mass action)";
		      RateOfReaction _rate = reaction.getRate();
		      if ((_rate instanceof HillRate)) {
		        r = "(Hill)";
		      } else {
		        RateOfReaction _rate_1 = reaction.getRate();
		        if ((_rate_1 instanceof ArbitraryRate)) {
		          r = "(arbitrary)";
		        }
		      }
		      String _xifexpression = null;
		      if (((reaction.getName() == null) || (((Object[])Conversions.unwrapArray(reaction.getName(), Object.class)).length == 0))) {
		        String _text = this.text(reaction.getReagents());
		        String _plus = (_text + " -> ");
		        String _text_1 = this.text(reaction.getProducts());
		        String _plus_1 = (_plus + _text_1);
		        String _plus_2 = (_plus_1 + " ");
		        _xifexpression = (_plus_2 + r);
		      } else {
		        EList<String> _name = reaction.getName();
		        String _plus_3 = ("Reaction " + _name);
		        String _plus_4 = (_plus_3 + "(");
		        String _plus_5 = (_plus_4 + r);
		        _xifexpression = (_plus_5 + ")");
		      }
		      _xblockexpression = _xifexpression;
		    }
		    return _xblockexpression;
		  }
		  
		  public String text(final ALG alg) {
		    String _name = alg.getName().getName();
		    return ("Alg " + _name);
		  }
		  
		  public String text(final ODE ode) {
		    String _name = ode.getName().getName();
		    String _plus = ("d(" + _name);
		    return (_plus + ")");
		  }
		  
		  /**
		   * def text(ODEDef odeDef) {
		   * if(odeDef.allSpecies.size>0 && odeDef.allSpecies.get(0)!=null){
		   * odeDef.allSpecies.get(0).name
		   * }
		   * else{
		   * 'ID'
		   * }
		   * }
		   */
		  public String text(final MassActionRate rateOfReaction) {
		    String _text = this.text(rateOfReaction.getRate());
		    return ("mass action rate " + _text);
		  }
		  
		  public String text(final ArbitraryRate rateOfReaction) {
		    String _text = this.text(rateOfReaction.getRate());
		    return ("arbitrary rate " + _text);
		  }
		  
		  public String text(final HillRate rateOfReaction) {
		    String _text = this.text(rateOfReaction.getK());
		    String _plus = (("Hill rate " + 
		      "K = ") + _text);
		    String _plus_1 = (_plus + 
		      ", R1 = ");
		    String _text_1 = this.text(rateOfReaction.getR1());
		    String _plus_2 = (_plus_1 + _text_1);
		    String _plus_3 = (_plus_2 + 
		      ", R2 = ");
		    String _text_2 = this.text(rateOfReaction.getR2());
		    String _plus_4 = (_plus_3 + _text_2);
		    String _plus_5 = (_plus_4 + 
		      ", n1 = ");
		    Object _text_3 = this.text(Integer.valueOf(rateOfReaction.getN1()));
		    String _plus_6 = (_plus_5 + _text_3);
		    String _plus_7 = (_plus_6 + 
		      ", n2 = ");
		    Object _text_4 = this.text(Integer.valueOf(rateOfReaction.getN2()));
		    return (_plus_7 + _text_4);
		  }
		  
		  public String text(final Composite composite) {
		    return MyParserUtil.visitComposite(composite);
		  }
		  
		  public String text(final SpeciesWithMultiplicity speciesWithMult) {
		    return MyParserUtil.visitSpeciesWithMult(speciesWithMult);
		  }
		  
		  public String text(final FormattedOptionalParametersReductions params) {
		    return "reduction parameters";
		  }
		  
		  public String text(final curry cur) {
			    return "curry";
			  }
		  
		  public String text(final Command command) {
		    String _xifexpression = null;
		    if ((command instanceof UpdateStatusCommand)) {
		      String _xblockexpression = null;
		      {
		        //UpdateStatusReduction usr = ((UpdateStatusReduction) command);
		        Reduction red = ((UpdateStatusCommand)command).getReduction();
		        if(red!=null) {
		        String name = red.getClass().getName();
		        int _lastIndexOf = name.lastIndexOf(".");
		        int _plus = (_lastIndexOf + 1);
		        String _substring = name.substring(_plus, name.lastIndexOf("Impl"));
		        String _plus_1 = ("this=" + _substring);
		        _xblockexpression = name = _plus_1;
		        }
		        else {
		        	curry cur =  ((UpdateStatusCommand)command).getCurrying();
		        	if(cur!=null) {
		        		_xblockexpression=("this=curry");
		        	}
		        }
		      }
		      _xifexpression = _xblockexpression;
		    } else {
		      String _xblockexpression_1 = null;
		      {
		        String name = command.getClass().getName();
		        int _lastIndexOf = name.lastIndexOf(".");
		        int _plus = (_lastIndexOf + 1);
		        _xblockexpression_1 = name = name.substring(_plus, name.lastIndexOf("Impl"));
		      }
		      _xifexpression = _xblockexpression_1;
		    }
		    return _xifexpression;
		  }
		  
		  public String text(final Import imp) {
		    String _xblockexpression = null;
		    {
		      String name = imp.getClass().getName();
		      int _lastIndexOf = name.lastIndexOf(".");
		      int _plus = (_lastIndexOf + 1);
		      _xblockexpression = name = name.substring(_plus, name.lastIndexOf("Impl"));
		    }
		    return _xblockexpression;
		  }
		  
		  public String text(final ImportFolder imp) {
			    String _xblockexpression = null;
			    {
			      String name = imp.getClass().getName();
			      int _lastIndexOf = name.lastIndexOf(".");
			      int _plus = (_lastIndexOf + 1);
			      _xblockexpression = name = name.substring(_plus, name.lastIndexOf("Impl"));
			    }
			    return _xblockexpression;
			  }
		  
		  public String text(final Expression expr) {
		    return MyParserUtil.visitExpr(expr);
		  }
}
