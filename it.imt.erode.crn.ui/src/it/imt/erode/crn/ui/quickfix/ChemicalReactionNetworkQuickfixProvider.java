/*
 * generated by Xtext 2.20.0
 */
package it.imt.erode.crn.ui.quickfix;

import it.imt.erode.crn.validation.ChemicalReactionNetworkValidator;
import java.io.File;
import java.util.StringTokenizer;
import org.eclipse.jface.text.FindReplaceDocumentAdapter;
import org.eclipse.jface.text.IRegion;
import org.eclipse.xtext.diagnostics.Diagnostic;
import org.eclipse.xtext.ui.editor.model.IXtextDocument;
import org.eclipse.xtext.ui.editor.model.edit.IModification;
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext;
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider;
import org.eclipse.xtext.ui.editor.quickfix.Fix;
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor;
import org.eclipse.xtext.validation.Issue;
import org.eclipse.xtext.xbase.lib.Exceptions;

/**
 * Custom quickfixes.
 *
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
public class ChemicalReactionNetworkQuickfixProvider extends DefaultQuickfixProvider {

//	@Fix(ChemicalReactionNetworkValidator.INVALID_NAME)
//	public void capitalizeName(final Issue issue, IssueResolutionAcceptor acceptor) {
//		acceptor.accept(issue, "Capitalize name", "Capitalize the name.", "upcase.png", new IModification() {
//			public void apply(IModificationContext context) throws BadLocationException {
//				IXtextDocument xtextDocument = context.getXtextDocument();
//				String firstLetter = xtextDocument.get(issue.getOffset(), 1);
//				xtextDocument.replace(issue.getOffset(), 1, firstLetter.toUpperCase());
//			}
//		});
//	}
	
	private final String addGif = (("icons" + File.separator) + "add.gif");
	  
	  @Fix(ChemicalReactionNetworkValidator.UNDEFINED_SPECIES)
	  public void defineAllMissingSpecies(final Issue issue, final IssueResolutionAcceptor acceptor) {
	    String _message = issue.getMessage();
	    int _indexOf = issue.getMessage().indexOf(":");
	    int _plus = (_indexOf + 1);
	    final String msg = _message.substring(_plus).trim();
	    final IModification _function = (IModificationContext context) -> {
	      this.createAllMissingSpeciesPrivate(msg, context);
	    };
	    acceptor.accept(issue, ("Create all missing species: " + msg), ("Create all missing species: " + msg), "Species.gif", _function);
	  }
	  
	  public void createAllMissingSpeciesPrivate(final String msg, final IModificationContext context) {
	    try {
	      String _replace = msg.trim().replace(" ", "\n  ");
	      String allMissingSpecies = ("  " + _replace);
	      final IXtextDocument xtextDocument = context.getXtextDocument();
	      final FindReplaceDocumentAdapter frda = new FindReplaceDocumentAdapter(xtextDocument);
	      final String search = "end init";
	      IRegion pos = frda.find(0, search, true, true, false, false);
	      if ((pos != null)) {
	        xtextDocument.replace(pos.getOffset(), pos.getLength(), ((allMissingSpecies + "\n") + search));
	      } else {
	        pos = frda.find(0, "end parameters", true, true, false, false);
	        if ((pos != null)) {
	          xtextDocument.replace(pos.getOffset(), pos.getLength(), ((("end parameters\n" + "begin init\n  ") + allMissingSpecies) + "\n end init\n"));
	        } else {
	          pos = frda.find(0, "begin ODE", true, true, false, false);
	          if ((pos != null)) {
	            xtextDocument.replace(pos.getOffset(), pos.getLength(), ((("begin init\n  " + allMissingSpecies) + "\n end init\n") + "begin ODE"));
	          } else {
	            pos = frda.find(0, "begin reactions", true, true, false, false);
	            xtextDocument.replace(pos.getOffset(), pos.getLength(), ((("begin init\n  " + allMissingSpecies) + "\n end init\n") + "begin reactions"));
	          }
	        }
	      }
	    } catch (Throwable _e) {
	      throw Exceptions.sneakyThrow(_e);
	    }
	  }
	  
	  @Fix(ChemicalReactionNetworkValidator.MISSING_DRIFTS)
	  public void giveAllMissingDrifts(final Issue issue, final IssueResolutionAcceptor acceptor) {
	    String _message = issue.getMessage();
	    int _indexOf = issue.getMessage().indexOf(":");
	    int _plus = (_indexOf + 1);
	    final String msg = _message.substring(_plus).trim();
	    final IModification _function = (IModificationContext context) -> {
	      this.createAllMissingDriftsPrivate(msg, context);
	    };
	    acceptor.accept(issue, (("Create all missing drifts (" + msg) + ")"), (("Create all missing drifts (" + msg) + ")"), "Species.gif", _function);
	  }
	  
	  public void createAllMissingDriftsPrivate(final String msg, final IModificationContext context) {
	    try {
	      String _trim = msg.trim();
	      StringTokenizer allMissingDriftsTokenizer = new StringTokenizer(_trim);
	      StringBuilder allMissingDriftsSB = new StringBuilder();
	      String nextDrift = allMissingDriftsTokenizer.nextToken(" ");
	      while ((nextDrift != null)) {
	        {
	          allMissingDriftsSB.append("\n  d(");
	          allMissingDriftsSB.append(nextDrift);
	          allMissingDriftsSB.append(") = 0");
	          boolean _hasMoreTokens = allMissingDriftsTokenizer.hasMoreTokens();
	          if (_hasMoreTokens) {
	            nextDrift = allMissingDriftsTokenizer.nextToken(" ");
	          } else {
	            nextDrift = null;
	          }
	        }
	      }
	      String allMissingDrifts = allMissingDriftsSB.toString();
	      final IXtextDocument xtextDocument = context.getXtextDocument();
	      final FindReplaceDocumentAdapter frda = new FindReplaceDocumentAdapter(xtextDocument);
	      final String search = "end ODE";
	      IRegion pos = frda.find(0, search, true, true, false, false);
	      if ((pos != null)) {
	        xtextDocument.replace(pos.getOffset(), pos.getLength(), ((allMissingDrifts + "\n") + search));
	      } else {
	        pos = frda.find(0, "end init", true, true, false, false);
	        xtextDocument.replace(pos.getOffset(), pos.getLength(), ((("end init\n" + "begin ODE  ") + allMissingDrifts) + "\n end ODE\n"));
	      }
	    } catch (Throwable _e) {
	      throw Exceptions.sneakyThrow(_e);
	    }
	  }
	  
	  /**
	   * def createAllMissingSpeciesPrivatePreCav(String msg, IModificationContext context) {
	   * val xtextDocument = context.xtextDocument
	   * val frda = new FindReplaceDocumentAdapter(xtextDocument)
	   * 
	   * var species=false
	   * var ic=false
	   * var ode=false
	   * val search = "end species"
	   * var pos = frda.find(0,search,true,true,false,false)
	   * if(pos!==null){
	   * species=true
	   * }
	   * else{
	   * pos = frda.find(0,"begin initialConcentrations",true,true,false,false)
	   * if(pos!==null){
	   * ic=true
	   * }
	   * else{
	   * ode=true
	   * }
	   * }
	   * 
	   * if(species){
	   * var allMissingSpecies = msg.replace(' ','\n')
	   * //frda.replace(allMissingSpecies +"\n"+search,false)
	   * xtextDocument.replace(pos.offset,pos.length,allMissingSpecies +"\n"+search);
	   * }
	   * else{
	   * var missingNames = msg.split("\\ ")
	   * var sb = new StringBuilder()
	   * for(var i=0;i<missingNames.length;i++){
	   * val undefinedName = missingNames.get(i)
	   * sb.append("d(")
	   * sb.append(undefinedName)
	   * sb.append(") = 0.0\n")
	   * }
	   * if(ic){
	   * sb.append("begin initialConcentrations")
	   * }
	   * else{
	   * sb.append("end ODE")
	   * }
	   * //frda.replace(sb.toString,false)
	   * xtextDocument.replace(pos.offset,pos.length,sb.toString);
	   * }
	   * 
	   * 
	   * //		var missingNames = msg.split("\\ ")
	   * //		for(var i=0;i<missingNames.length;i++){
	   * //			val undefinedName = missingNames.get(i)
	   * //			if(!undefinedName.equals("")){
	   * //				val search = "end species"
	   * //				var pos = frda.find(0,search,true,true,false,false)
	   * //				if(pos!==null){
	   * //					frda.replace(undefinedName +"\n"+search,false)
	   * //				}
	   * //				else{
	   * //					pos = frda.find(0,"begin initialConcentrations",true,true,false,false)
	   * //					if(pos!==null){
	   * //						frda.replace("d("+undefinedName+") = 0.0;\n"+"begin initialConcentrations",false)
	   * //					}
	   * //					else{
	   * //						pos = frda.find(0,"end ODE",true,true,false,false)
	   * //						frda.replace("d("+undefinedName+") = 0.0;\n"+"end ODE",false)
	   * //					}
	   * //				}
	   * //			}
	   * //		}
	   * }
	   */
	  @Fix(ChemicalReactionNetworkValidator.DUPLICATE_NAMES)
	  public void renameDuplicateSpecies(final Issue issue, final IssueResolutionAcceptor acceptor) {
	    final String name = this.extractNameOfDuplicateName(issue.getMessage());
	    final IModification _function = (IModificationContext context) -> {
	      final IXtextDocument xtextDocument = context.getXtextDocument();
	      final String duplicateName = xtextDocument.get((issue.getOffset()).intValue(), (issue.getLength()).intValue());
	      xtextDocument.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), (duplicateName + "2"));
	    };
	    acceptor.accept(issue, (("Rename in " + name) + "2"), "Suffix the name with \"2\".", "upcase.png", _function);
	  }
	  
	  @Fix(ChemicalReactionNetworkValidator.E_NAME)
	  public void renameE(final Issue issue, final IssueResolutionAcceptor acceptor) {
	    final IModification _function = (IModificationContext context) -> {
	      final IXtextDocument xtextDocument = context.getXtextDocument();
	      final String eName = xtextDocument.get((issue.getOffset()).intValue(), (issue.getLength()).intValue());
	      xtextDocument.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), (eName + "2"));
	    };
	    acceptor.accept(issue, "Rename in e2/E2", "Suffix the name with \"2\".", "upcase.png", _function);
	  }
	  
	  @Fix(ChemicalReactionNetworkValidator.DEC_NAME)
	  public void renameDec(final Issue issue, final IssueResolutionAcceptor acceptor) {
	    final IModification _function = (IModificationContext context) -> {
	      final IXtextDocument xtextDocument = context.getXtextDocument();
	      final String decName = xtextDocument.get((issue.getOffset()).intValue(), (issue.getLength()).intValue());
	      xtextDocument.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), ("s" + decName));
	    };
	    acceptor.accept(issue, "Prefix with s", "Prefix the name with \"s\".", "upcase.png", _function);
	  }
	  
	  @Fix(ChemicalReactionNetworkValidator.NAME_NOT_STARTING_WITH_LETTER)
	  public void addInitialLetter(final Issue issue, final IssueResolutionAcceptor acceptor) {
	    final IModification _function = (IModificationContext context) -> {
	      final IXtextDocument xtextDocument = context.getXtextDocument();
	      final String name = xtextDocument.get((issue.getOffset()).intValue(), (issue.getLength()).intValue());
	      xtextDocument.replace((issue.getOffset()).intValue(), (issue.getLength()).intValue(), ("n" + name));
	    };
	    acceptor.accept(issue, "Prefix with \"n\"", "Prefix the name with \"n\".", "upcase.png", _function);
	  }
	  
	  /**
	   * @Fix(Diagnostic.LINKING_DIAGNOSTIC)
	   * def createView(Issue issue, IssueResolutionAcceptor acceptor) {
	   * acceptor.accept(issue, "Create missing view","Create the missing view","View.gif")[
	   * context |
	   * val xtextDocument = context.xtextDocument
	   * val frda = new FindReplaceDocumentAdapter(xtextDocument)
	   * val undefinedName = xtextDocument.get(issue.offset, issue.length)
	   * val search = "end views"
	   * val posViews = frda.find(0,search,true,true,false,false)
	   * if(posViews!==null){
	   * frda.replace(undefinedName + " = 0.0;\n"+search,false)
	   * }
	   * else{
	   * frda.find(0,"end model",true,true,false,false)
	   * frda.replace("begin views"+"\n"+undefinedName + " = 0.0;\n"+"end views"+"\n"+"end model",false)
	   * }
	   * ]
	   * }
	   */
	  @Fix(Diagnostic.LINKING_DIAGNOSTIC)
	  public void createMissingParameter(final Issue issue, final IssueResolutionAcceptor acceptor) {
	    final String kind = this.extractKindOfMissingReference(issue.getMessage());
	    final String name = this.extractNameOfMissingReference(issue.getMessage());
	    boolean _startsWith = kind.startsWith("parameteror");
	    if (_startsWith) {
	      final IModification _function = (IModificationContext context) -> {
	        this.createMissingParameterPrivate(issue, context);
	      };
	      acceptor.accept(issue, ("Create missing parameter " + name), ("Create the missing parameter " + name), this.addGif, _function);
	    }
	  }
	  
	  @Fix(Diagnostic.LINKING_DIAGNOSTIC)
	  public void createMissingSymbolicParameter(final Issue issue, final IssueResolutionAcceptor acceptor) {
	    final String kind = this.extractKindOfMissingReference(issue.getMessage());
	    final String name = this.extractNameOfMissingReference(issue.getMessage());
	    boolean _startsWith = kind.startsWith("parameteror");
	    if (_startsWith) {
	      final IModification _function = (IModificationContext context) -> {
	        this.createMissingSymbolicParameterPrivate(issue, context);
	      };
	      acceptor.accept(issue, ("Create missing symbolic parameter " + name), ("Create the missing symbolic parameter " + name), this.addGif, _function);
	    }
	  }
	  
	  @Fix(Diagnostic.LINKING_DIAGNOSTIC)
	  public void createMissingSpecies(final Issue issue, final IssueResolutionAcceptor acceptor) {
	    final String kind = this.extractKindOfMissingReference(issue.getMessage());
	    final String name = this.extractNameOfMissingReference(issue.getMessage());
	    boolean _startsWith = kind.startsWith("parameterorsymbolicparameterorspecies");
	    if (_startsWith) {
	      final IModification _function = (IModificationContext context) -> {
	        this.createMissingSpeciesPrivate(issue, context);
	      };
	      acceptor.accept(issue, ("Create missing species " + name), ("Create the missing species " + name), this.addGif, _function);
	    }
	  }
	  
	  @Fix(Diagnostic.LINKING_DIAGNOSTIC)
	  public void createMissingAlgebraicSpecies(final Issue issue, final IssueResolutionAcceptor acceptor) {
	    final String kind = this.extractKindOfMissingReference(issue.getMessage());
	    final String name = this.extractNameOfMissingReference(issue.getMessage());
	    boolean _startsWith = kind.startsWith("parameterorsymbolicparameterorspecies");
	    if (_startsWith) {
	      final IModification _function = (IModificationContext context) -> {
	        this.createMissingAlgebraicSpeciesPrivate(issue, context);
	      };
	      acceptor.accept(issue, ("Create missing algebraic species " + name), ("Create the missing algebraic species " + name), this.addGif, _function);
	    }
	  }
	  
	  @Fix(Diagnostic.LINKING_DIAGNOSTIC)
	  public void createMissingElementGuessingKind(final Issue issue, final IssueResolutionAcceptor acceptor) {
	    final String kind = this.extractKindOfMissingReference(issue.getMessage());
	    final String name = this.extractNameOfMissingReference(issue.getMessage());
	    boolean _startsWith = kind.startsWith("parameteror");
	    boolean _not = (!_startsWith);
	    if (_not) {
	      String whatToCreate = "parameter";
	      boolean _startsWith_1 = kind.startsWith("species");
	      if (_startsWith_1) {
	        whatToCreate = "species";
	      }
	      boolean _startsWith_2 = kind.startsWith("alg");
	      if (_startsWith_2) {
	        whatToCreate = "algebraic species";
	      }
	      final String whatToCreateVal = whatToCreate;
	      final IModification _function = (IModificationContext context) -> {
	        boolean _startsWith_3 = whatToCreateVal.startsWith("alg");
	        if (_startsWith_3) {
	          this.createMissingAlgebraicSpeciesPrivate(issue, context);
	        }
	        boolean _startsWith_4 = whatToCreateVal.startsWith("species");
	        if (_startsWith_4) {
	          this.createMissingSpeciesPrivate(issue, context);
	        } else {
	          boolean _startsWith_5 = whatToCreateVal.startsWith("parameter");
	          if (_startsWith_5) {
	            this.createMissingParameterPrivate(issue, context);
	          }
	        }
	      };
	      acceptor.accept(issue, ((("Create missing " + whatToCreate) + " ") + name), ((("Create the missing " + whatToCreate) + " ") + name), this.addGif, _function);
	    }
	  }
	  
	  @Fix(ChemicalReactionNetworkValidator.SIMULATEODE_ALGEBRAIC)
	  public void simulateODEwithAlgebraic(final Issue issue, final IssueResolutionAcceptor acceptor) {
	    final IModification _function = (IModificationContext context) -> {
	    };
	    acceptor.accept(issue, "Remove the algebraic constraint and species", "Remove the algebraic constraint and species", this.addGif, _function);
	    final IModification _function_1 = (IModificationContext context) -> {
	    };
	    acceptor.accept(issue, "Replace simulateODE with simulateDAE", "Replace simulateODE with simulateDAE", this.addGif, _function_1);
	  }
	  
	  @Fix(ChemicalReactionNetworkValidator.REDUCTION_MASSCTION)
	  public void replaceMassActionReduction(final Issue issue, final IssueResolutionAcceptor acceptor) {
	    String _message = issue.getMessage();
	    int _indexOf = issue.getMessage().indexOf(" ");
	    int _plus = (_indexOf + 1);
	    String red = _message.substring(_plus);
	    red = red.substring(0, red.indexOf(" "));
	    final String redVal = red;
	    boolean _not = (!((red.equalsIgnoreCase("reduceSMB") || red.equalsIgnoreCase("reduceEpsNFB")) || red.equalsIgnoreCase("reduceEpsNBB")));
	    if (_not) {
	      String smtRed = "reduceBDE";
	      if (((red.equalsIgnoreCase("reduceFB") || red.equalsIgnoreCase("reduceFE")) || red.equalsIgnoreCase("reduceDSB"))) {
	        smtRed = "reduceFDE";
	      }
	      final String smtRedVal = smtRed;
	      final IModification _function = (IModificationContext context) -> {
	        final IXtextDocument xtextDocument = context.getXtextDocument();
	        xtextDocument.replace((issue.getOffset()).intValue(), redVal.length(), smtRedVal);
	      };
	      acceptor.accept(issue, ((("Replace " + red) + " with ") + smtRed), ("Change to the corresponding SMT-based reduction " + smtRed), "upcase.png", _function);
	    }
	  }
	  
	  @Fix(ChemicalReactionNetworkValidator.REDUCTION_TERNARYORMORE)
	  public void replaceElementaryReduction(final Issue issue, final IssueResolutionAcceptor acceptor) {
	    String _message = issue.getMessage();
	    int _indexOf = issue.getMessage().indexOf(" ");
	    int _plus = (_indexOf + 1);
	    String red = _message.substring(_plus);
	    red = red.substring(0, red.indexOf(" "));
	    final String redVal = red;
	    boolean _equalsIgnoreCase = red.equalsIgnoreCase("reduceSMB");
	    boolean _not = (!_equalsIgnoreCase);
	    if (_not) {
	      String suppRed = "reduceBE";
	      boolean _equalsIgnoreCase_1 = red.equalsIgnoreCase("reduceFB");
	      if (_equalsIgnoreCase_1) {
	        suppRed = "reduceFE";
	      } else {
	        boolean _equalsIgnoreCase_2 = red.equalsIgnoreCase("reduceDSB");
	        if (_equalsIgnoreCase_2) {
	          suppRed = "reduceFE";
	        }
	      }
	      final String suppRedVal = suppRed;
	      final IModification _function = (IModificationContext context) -> {
	        final IXtextDocument xtextDocument = context.getXtextDocument();
	        xtextDocument.replace((issue.getOffset()).intValue(), redVal.length(), suppRedVal);
	      };
	      acceptor.accept(issue, ((("Replace " + red) + " with ") + suppRed), ("Change to the corresponding n-ary reduction " + suppRed), "upcase.png", _function);
	    }
	  }
	  
	  public String extractKindOfMissingReference(final String message) {
	    String _xblockexpression = null;
	    {
	      final String prefix = "Couldn\'t resolve reference to ";
	      String category = message.substring(prefix.length());
	      _xblockexpression = category.substring(0, category.indexOf(" ")).toLowerCase();
	    }
	    return _xblockexpression;
	  }
	  
	  public String extractNameOfMissingReference(final String message) {
	    String _xblockexpression = null;
	    {
	      final String prefix = "Couldn\'t resolve reference to ";
	      String category = message.substring(prefix.length());
	      int _indexOf = category.indexOf(" ");
	      int _plus = (_indexOf + 1);
	      String name = category.substring(_plus, category.length()).trim();
	      int _lastIndexOf = name.lastIndexOf("\'");
	      int _plus_1 = (_lastIndexOf + 1);
	      _xblockexpression = name.substring(0, _plus_1);
	    }
	    return _xblockexpression;
	  }
	  
	  public String extractNameOfDuplicateName(final String message) {
	    String _xblockexpression = null;
	    {
	      int _indexOf = message.indexOf("\'");
	      int _plus = (_indexOf + 1);
	      String name = message.substring(_plus);
	      _xblockexpression = name = name.substring(0, name.indexOf("\'"));
	    }
	    return _xblockexpression;
	  }
	  
	  public void createMissingParameterPrivate(final Issue issue, final IModificationContext context) {
	    try {
	      final IXtextDocument xtextDocument = context.getXtextDocument();
	      final FindReplaceDocumentAdapter frda = new FindReplaceDocumentAdapter(xtextDocument);
	      final String undefinedName = xtextDocument.get((issue.getOffset()).intValue(), (issue.getLength()).intValue());
	      final String search = "end parameters";
	      final IRegion pos = frda.find(0, search, true, true, false, false);
	      if ((pos != null)) {
	        xtextDocument.replace(pos.getOffset(), pos.getLength(), (((" " + undefinedName) + " = 0.0\n") + search));
	      } else {
	        final IRegion posinit = frda.find(0, "begin init", true, true, false, false);
	        xtextDocument.replace(posinit.getOffset(), posinit.getLength(), (((((("begin parameters" + "\n ") + undefinedName) + " = 0.0\n") + "end parameters") + "\n") + "begin init"));
	      }
	    } catch (Throwable _e) {
	      throw Exceptions.sneakyThrow(_e);
	    }
	  }
	  
	  public void createMissingSymbolicParameterPrivate(final Issue issue, final IModificationContext context) {
	    try {
	      final IXtextDocument xtextDocument = context.getXtextDocument();
	      final FindReplaceDocumentAdapter frda = new FindReplaceDocumentAdapter(xtextDocument);
	      final String undefinedName = xtextDocument.get((issue.getOffset()).intValue(), (issue.getLength()).intValue());
	      final String search = "end symbolic parameters";
	      final IRegion pos = frda.find(0, search, true, true, false, false);
	      if ((pos != null)) {
	        xtextDocument.replace(pos.getOffset(), pos.getLength(), (((" " + undefinedName) + "\n") + search));
	      } else {
	    	  /*final IRegion posParams = frda.find(0, "begin parameters", true, true, false, false);
	        if ((pos != null)) {
	          xtextDocument.replace(posParams.getOffset(), posParams.getLength(), (((((("begin symbolic parameters" + "\n ") + undefinedName) + "\n") + "end symbolic parameters") + "\n") + "begin parameters"));
	        } else*/ 
	        {
	          final IRegion posinit = frda.find(0, "begin init", true, true, false, false);
	          xtextDocument.replace(posinit.getOffset(), posinit.getLength(), (((((("begin symbolic parameters" + "\n ") + undefinedName) + "\n") + "end symbolic parameters") + "\n") + "begin init"));
	        }
	      }
	    } catch (Throwable _e) {
	      throw Exceptions.sneakyThrow(_e);
	    }
	  }
	  
	  public void createMissingAlgebraicSpeciesPrivate(final Issue issue, final IModificationContext context) {
	    try {
	      final IXtextDocument xtextDocument = context.getXtextDocument();
	      final FindReplaceDocumentAdapter frda = new FindReplaceDocumentAdapter(xtextDocument);
	      final String undefinedName = xtextDocument.get((issue.getOffset()).intValue(), (issue.getLength()).intValue());
	      final String search = "end alginit";
	      IRegion pos = frda.find(0, search, true, true, false, false);
	      if ((pos != null)) {
	        xtextDocument.replace(pos.getOffset(), pos.getLength(), ((undefinedName + "\n") + search));
	      } else {
	        pos = frda.find(0, "end parameters", true, true, false, false);
	        if ((pos != null)) {
	          xtextDocument.replace(pos.getOffset(), pos.getLength(), ((("end parameters\n" + "begin init\n  ") + undefinedName) + "\n end init\n"));
	        } else {
	          pos = frda.find(0, "begin ODE", true, true, false, false);
	          if ((pos != null)) {
	            xtextDocument.replace(pos.getOffset(), pos.getLength(), ((("begin init\n  " + undefinedName) + "\n end init\n") + "begin ODE"));
	          } else {
	            pos = frda.find(0, "begin reactions", true, true, false, false);
	            xtextDocument.replace(pos.getOffset(), pos.getLength(), ((("begin init\n  " + undefinedName) + "\n end init\n") + "begin reactions"));
	          }
	        }
	      }
	    } catch (Throwable _e) {
	      throw Exceptions.sneakyThrow(_e);
	    }
	  }
	  
	  public void createMissingSpeciesPrivate(final Issue issue, final IModificationContext context) {
	    try {
	      final IXtextDocument xtextDocument = context.getXtextDocument();
	      final FindReplaceDocumentAdapter frda = new FindReplaceDocumentAdapter(xtextDocument);
	      final String undefinedName = xtextDocument.get((issue.getOffset()).intValue(), (issue.getLength()).intValue());
	      final String search = "end init";
	      IRegion pos = frda.find(0, search, true, true, false, false);
	      if ((pos != null)) {
	        xtextDocument.replace(pos.getOffset(), pos.getLength(), ((undefinedName + "\n") + search));
	      } else {
	        pos = frda.find(0, "end parameters", true, true, false, false);
	        if ((pos != null)) {
	          xtextDocument.replace(pos.getOffset(), pos.getLength(), ((("end parameters\n" + "begin init\n  ") + undefinedName) + "\n end init\n"));
	        } else {
	          pos = frda.find(0, "begin ODE", true, true, false, false);
	          if ((pos != null)) {
	            xtextDocument.replace(pos.getOffset(), pos.getLength(), ((("begin init\n  " + undefinedName) + "\n end init\n") + "begin ODE"));
	          } else {
	            pos = frda.find(0, "begin reactions", true, true, false, false);
	            xtextDocument.replace(pos.getOffset(), pos.getLength(), ((("begin init\n  " + undefinedName) + "\n end init\n") + "begin reactions"));
	          }
	        }
	      }
	    } catch (Throwable _e) {
	      throw Exceptions.sneakyThrow(_e);
	    }
	  }

}
